import * as axios from 'axios';
import { AxiosRequestConfig, AxiosInstance, AxiosPromise } from 'axios';

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}
declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface RequestArgs
 */
interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}
/**
 *
 * @export
 * @class BaseAPI
 */
declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AbiParametersInner
 */
interface AbiParametersInner {
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AccelerateTransactionForEndUserRequest
 */
interface AccelerateTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof AccelerateTransactionForEndUserRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface PinData
 */
interface PinData {
    /**
     * Unique system generated identifier used to initiate a user challenge flow.
     * @type {string}
     * @memberof PinData
     */
    'challengeId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface AccelerateTransactionForEndUserResponse
 */
interface AccelerateTransactionForEndUserResponse {
    /**
     *
     * @type {PinData}
     * @memberof AccelerateTransactionForEndUserResponse
     */
    'data'?: PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An account can be a Smart Contract Account (SCA) or an Externally Owned Account (EOA). To learn more, see the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types).  If an account type is not specified during the creation of a wallet, it defaults to `EOA` (Externally Owned Account). Note that Solana doesn\'t support Smart Contract Account (SCA).
 * @export
 * @enum {string}
 */
declare const AccountType: {
    readonly Sca: "SCA";
    readonly Eoa: "EOA";
};
type AccountType = typeof AccountType[keyof typeof AccountType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface BadRequestResponse
 */
interface BadRequestResponse {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof BadRequestResponse
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof BadRequestResponse
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The blockchain network that the resource is to be created on or is currently on.
 * @export
 * @enum {string}
 */
declare const Blockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Sol: "SOL";
    readonly SolDevnet: "SOL-DEVNET";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Near: "NEAR";
    readonly NearTestnet: "NEAR-TESTNET";
    readonly Evm: "EVM";
    readonly EvmTestnet: "EVM-TESTNET";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type Blockchain = typeof Blockchain[keyof typeof Blockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const TokenStandard: {
    readonly Erc20: "ERC20";
    readonly Erc721: "ERC721";
    readonly Erc1155: "ERC1155";
    readonly Fungible: "Fungible";
    readonly FungibleAsset: "FungibleAsset";
    readonly NonFungible: "NonFungible";
    readonly NonFungibleEdition: "NonFungibleEdition";
    readonly ProgrammableNonFungible: "ProgrammableNonFungible";
    readonly ProgrammableNonFungibleEdition: "ProgrammableNonFungibleEdition";
};
type TokenStandard = typeof TokenStandard[keyof typeof TokenStandard];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Token
 */
interface Token {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Token
     */
    'id': string;
    /**
     * Blockchain name of the specified token.
     * @type {string}
     * @memberof Token
     */
    'name'?: string;
    /**
     *
     * @type {TokenStandard}
     * @memberof Token
     */
    'standard'?: TokenStandard;
    /**
     *
     * @type {Blockchain}
     * @memberof Token
     */
    'blockchain': Blockchain;
    /**
     * Number of decimal places shown in the token amount.
     * @type {number}
     * @memberof Token
     */
    'decimals'?: number;
    /**
     * Defines if the token is a native token of the specified blockchain. If TRUE, the token is a native token.
     * @type {boolean}
     * @memberof Token
     */
    'isNative': boolean;
    /**
     * Blockchain symbol of the specified token.
     * @type {string}
     * @memberof Token
     */
    'symbol'?: string;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Token
     */
    'tokenAddress'?: string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Token
     */
    'updateDate': string;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Token
     */
    'createDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Balance
 */
interface Balance {
    /**
     * Token balance for each token in the wallet.
     * @type {string}
     * @memberof Balance
     */
    'amount': string;
    /**
     *
     * @type {Token}
     * @memberof Balance
     */
    'token': Token;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Balance
     */
    'updateDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface BalancesData
 */
interface BalancesData {
    /**
     * List of token balances for each token on the wallet(s).
     * @type {Array<Balance>}
     * @memberof BalancesData
     */
    'tokenBalances'?: Array<Balance>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Balances
 */
interface Balances {
    /**
     *
     * @type {BalancesData}
     * @memberof Balances
     */
    'data': BalancesData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An action to to take for the decision.
 * @export
 * @enum {string}
 */
declare const RiskAction: {
    readonly Approve: "APPROVE";
    readonly Review: "REVIEW";
    readonly FreezeWallet: "FREEZE_WALLET";
    readonly Deny: "DENY";
};
type RiskAction = typeof RiskAction[keyof typeof RiskAction];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Screening decision detail about matched rule, actions to take, and all related risk signals.
 * @export
 * @interface BaseScreeningDecision
 */
interface BaseScreeningDecision {
    /**
     * Name of the matched rule found in screening.
     * @type {string}
     * @memberof BaseScreeningDecision
     */
    'ruleName'?: string;
    /**
     * Actions to take for the decision.
     * @type {Array<RiskAction>}
     * @memberof BaseScreeningDecision
     */
    'actions'?: Array<RiskAction>;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof BaseScreeningDecision
     */
    'screeningDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CancelTransactionForEndUserRequest
 */
interface CancelTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CancelTransactionForEndUserRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CancelTransactionForEndUserResponse
 */
interface CancelTransactionForEndUserResponse {
    /**
     *
     * @type {PinData}
     * @memberof CancelTransactionForEndUserResponse
     */
    'data'?: PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface Challenge
 */
interface Challenge {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Challenge
     */
    'id': string;
    /**
     * For type CREATE_WALLET, the wallet id associated with the request. For types CREATE_TRANSACTION, ACCELERATE_TRANSACTION, and CANCEL_TRANSACTION, the transaction id associated with the request.
     * @type {Array<string>}
     * @memberof Challenge
     */
    'correlationIds'?: Array<string>;
    /**
     * Indicates the failure reason of a challenge. Only present for challenges in FAILED status.
     * @type {number}
     * @memberof Challenge
     */
    'errorCode'?: number;
    /**
     * Description of the error or error reason. Only present for challenges in FAILED status.
     * @type {string}
     * @memberof Challenge
     */
    'errorMessage'?: string;
    /**
     *
     * @type {string}
     * @memberof Challenge
     */
    'status': ChallengeStatusEnum;
    /**
     * The challenge type
     * @type {string}
     * @memberof Challenge
     */
    'type': ChallengeTypeEnum;
}
declare const ChallengeStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Failed: "FAILED";
    readonly Expired: "EXPIRED";
};
type ChallengeStatusEnum = typeof ChallengeStatusEnum[keyof typeof ChallengeStatusEnum];
declare const ChallengeTypeEnum: {
    readonly Empty: "";
    readonly Initialize: "INITIALIZE";
    readonly SetPin: "SET_PIN";
    readonly ChangePin: "CHANGE_PIN";
    readonly SetSecurityQuestions: "SET_SECURITY_QUESTIONS";
    readonly CreateWallet: "CREATE_WALLET";
    readonly RestorePin: "RESTORE_PIN";
    readonly CreateTransaction: "CREATE_TRANSACTION";
    readonly AccelerateTransaction: "ACCELERATE_TRANSACTION";
    readonly CancelTransaction: "CANCEL_TRANSACTION";
    readonly ContractExecution: "CONTRACT_EXECUTION";
    readonly WalletUpgrade: "WALLET_UPGRADE";
    readonly SignMessage: "SIGN_MESSAGE";
    readonly SignTypeddata: "SIGN_TYPEDDATA";
    readonly SignTransaction: "SIGN_TRANSACTION";
};
type ChallengeTypeEnum = typeof ChallengeTypeEnum[keyof typeof ChallengeTypeEnum];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ChallengeResponseData
 */
interface ChallengeResponseData {
    /**
     *
     * @type {Challenge}
     * @memberof ChallengeResponseData
     */
    'challenge': Challenge;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ChallengeResponse
 */
interface ChallengeResponse {
    /**
     *
     * @type {ChallengeResponseData}
     * @memberof ChallengeResponse
     */
    'data': ChallengeResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ChallengesData
 */
interface ChallengesData {
    /**
     *
     * @type {Array<Challenge>}
     * @memberof ChallengesData
     */
    'challenges'?: Array<Challenge>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Challenges
 */
interface Challenges {
    /**
     *
     * @type {ChallengesData}
     * @memberof Challenges
     */
    'data': ChallengesData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Blockchain associated with the transaction. Required along with `sourceAddress` if you don\'t provide `walletId`.  The `blockchain` and `walletId` fields are mutually exclusive.
 * @export
 * @enum {string}
 */
declare const ContractExecutionBlockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type ContractExecutionBlockchain = typeof ContractExecutionBlockchain[keyof typeof ContractExecutionBlockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A dynamic blockchain fee level setting (`LOW`, `MEDIUM`, or `HIGH`) that will be used to pay gas for the transaction. Calculated based on network traffic, supply of validators, and demand for transaction verification. Cannot be used with `gasPrice`, `priorityFee`, or `maxFee`. Estimates for each fee level can be obtained through the `POST /transactions/transfer/estimateFee` API.
 * @export
 * @enum {string}
 */
declare const FeeLevel: {
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
};
type FeeLevel = typeof FeeLevel[keyof typeof FeeLevel];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateContractExecutionTransactionForEndUserRequest
 */
interface CreateContractExecutionTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'idempotencyKey': string;
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<AbiParametersInner>}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'abiParameters'?: Array<AbiParametersInner>;
    /**
     * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'callData'?: string;
    /**
     * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'amount'?: string;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'contractAddress': string;
    /**
     *
     * @type {FeeLevel}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'refId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForEndUserRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateContractExecutionTransactionForEndUserResponse
 */
interface CreateContractExecutionTransactionForEndUserResponse {
    /**
     *
     * @type {PinData}
     * @memberof CreateContractExecutionTransactionForEndUserResponse
     */
    'data'?: PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateEndUserWallet
 */
interface CreateEndUserWallet {
    /**
     *
     * @type {PinData}
     * @memberof CreateEndUserWallet
     */
    'data'?: PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface WalletMetadata
 */
interface WalletMetadata {
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof WalletMetadata
     */
    'name'?: string;
    /**
     * Reference or description used to identify the object.
     * @type {string}
     * @memberof WalletMetadata
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateEndUserWalletRequest
 */
interface CreateEndUserWalletRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateEndUserWalletRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {AccountType}
     * @memberof CreateEndUserWalletRequest
     */
    'accountType'?: AccountType;
    /**
     * Blockchain(s) the requested wallets will be created on.
     * @type {Array<Blockchain>}
     * @memberof CreateEndUserWalletRequest
     */
    'blockchains': Array<Blockchain>;
    /**
     * List of metadata fields to associate with the corresponding wallet.
     * @type {Array<WalletMetadata>}
     * @memberof CreateEndUserWalletRequest
     */
    'metadata'?: Array<WalletMetadata>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Blockchain of the transferred token. Required if `tokenId` is not provided. The `blockchain` and `tokenId` fields are mutually exclusive.
 * @export
 * @enum {string}
 */
declare const TokenBlockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Sol: "SOL";
    readonly SolDevnet: "SOL-DEVNET";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type TokenBlockchain = typeof TokenBlockchain[keyof typeof TokenBlockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferTransactionForEndUserRequest
 */
interface CreateTransferTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'idempotencyKey': string;
    /**
     * Transfer amounts in decimal number format, at least one element is required for transfer. For ERC721 token transfer, the amounts field is required to be [\"1\"] (array with \"1\" as the only element).
     * @type {Array<string>}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'amounts'?: Array<string>;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'destinationAddress': string;
    /**
     *
     * @type {FeeLevel}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'priorityFee'?: string;
    /**
     * List of NFT token IDs corresponding with the NFTs to transfer. Batch transfers are supported only for ERC-1155 tokens. The length of NFT token IDs must match the length of amounts.
     * @type {Array<string>}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'nftTokenIds'?: Array<string>;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'refId'?: string;
    /**
     * System generated identifier of the token. Excluded with `tokenAddress` and `tokenBlockchain`.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'tokenId'?: string;
    /**
     * Blockchain address of the transferred token. Empty for native tokens. Excluded with `tokenId`.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'tokenAddress'?: string;
    /**
     *
     * @type {TokenBlockchain}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'blockchain'?: TokenBlockchain;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof CreateTransferTransactionForEndUserRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferTransactionForEndUserResponse
 */
interface CreateTransferTransactionForEndUserResponse {
    /**
     *
     * @type {PinData}
     * @memberof CreateTransferTransactionForEndUserResponse
     */
    'data'?: PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateUserRequest
 */
interface CreateUserRequest {
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof CreateUserRequest
     */
    'userId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * `newScaCore` displays the version of the SCA available for upgrade. For a list of supported versions, refer to the developer documentation.
 * @export
 * @enum {string}
 */
declare const NewScaCore: {
    readonly Circle6900SingleownerV2: "circle_6900_singleowner_v2";
};
type NewScaCore = typeof NewScaCore[keyof typeof NewScaCore];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateWalletUpgradeTransactionForEndUserRequest
 */
interface CreateWalletUpgradeTransactionForEndUserRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {NewScaCore}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'newScaCore': NewScaCore;
    /**
     *
     * @type {FeeLevel}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'refId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForEndUserRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateWalletUpgradeTransactionForEndUserResponse
 */
interface CreateWalletUpgradeTransactionForEndUserResponse {
    /**
     *
     * @type {PinData}
     * @memberof CreateWalletUpgradeTransactionForEndUserResponse
     */
    'data'?: PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Describes who controls the digital assets in a wallet: either the end-user or the developer.
 * @export
 * @enum {string}
 */
declare const CustodyType: {
    readonly Developer: "DEVELOPER";
    readonly Enduser: "ENDUSER";
};
type CustodyType = typeof CustodyType[keyof typeof CustodyType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface DeviceTokenEmailData
 */
interface DeviceTokenEmailData {
    /**
     * JWT token format. Used in social / verifyOTP APIs.
     * @type {string}
     * @memberof DeviceTokenEmailData
     */
    'deviceToken': string;
    /**
     * Used to encrypt request body before sending to backend server.
     * @type {string}
     * @memberof DeviceTokenEmailData
     */
    'deviceEncryptionKey'?: string;
    /**
     * The OTP is bound on a user and purpose, and uses this value to identify the request.
     * @type {string}
     * @memberof DeviceTokenEmailData
     */
    'otpToken'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface DeviceTokenEmail
 */
interface DeviceTokenEmail {
    /**
     *
     * @type {DeviceTokenEmailData}
     * @memberof DeviceTokenEmail
     */
    'data': DeviceTokenEmailData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface DeviceTokenEmailRequest
 */
interface DeviceTokenEmailRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof DeviceTokenEmailRequest
     */
    'idempotencyKey': string;
    /**
     * Get the device id from SDK, and the deviceToken is bound with this device id.
     * @type {string}
     * @memberof DeviceTokenEmailRequest
     */
    'deviceId': string;
    /**
     * Sends OTP email to the destination address.
     * @type {string}
     * @memberof DeviceTokenEmailRequest
     */
    'email': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface DeviceTokenSocialData
 */
interface DeviceTokenSocialData {
    /**
     * JWT token format. Used in social / verifyOTP APIs.
     * @type {string}
     * @memberof DeviceTokenSocialData
     */
    'deviceToken': string;
    /**
     * Used to encrypt request body before sending to backend server.
     * @type {string}
     * @memberof DeviceTokenSocialData
     */
    'deviceEncryptionKey'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface DeviceTokenSocial
 */
interface DeviceTokenSocial {
    /**
     *
     * @type {DeviceTokenSocialData}
     * @memberof DeviceTokenSocial
     */
    'data'?: DeviceTokenSocialData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface DeviceTokenSocialRequest
 */
interface DeviceTokenSocialRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof DeviceTokenSocialRequest
     */
    'idempotencyKey': string;
    /**
     * Get the device id from SDK, and the deviceToken is bound with this device id.
     * @type {string}
     * @memberof DeviceTokenSocialRequest
     */
    'deviceId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * This enum describes the current state of the wallet.
 * @export
 * @enum {string}
 */
declare const WalletState: {
    readonly Live: "LIVE";
    readonly Frozen: "FROZEN";
};
type WalletState = typeof WalletState[keyof typeof WalletState];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Wallet
 */
interface Wallet {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Wallet
     */
    'id': string;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Wallet
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof Wallet
     */
    'blockchain': Blockchain;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Wallet
     */
    'createDate': string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Wallet
     */
    'updateDate': string;
    /**
     *
     * @type {CustodyType}
     * @memberof Wallet
     */
    'custodyType': CustodyType;
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof Wallet
     */
    'name'?: string;
    /**
     * Reference or description used to identify the object.
     * @type {string}
     * @memberof Wallet
     */
    'refId'?: string;
    /**
     *
     * @type {WalletState}
     * @memberof Wallet
     */
    'state': WalletState;
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof Wallet
     */
    'userId'?: string;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Wallet
     */
    'walletSetId': string;
    /**
     * For NEAR blockchains only, the originally assigned public key of a wallet at the time of its creation.
     * @type {string}
     * @memberof Wallet
     */
    'initialPublicKey'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type EOAWallet
 * @export
 */
type EOAWallet = Wallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const EndUserStatus: {
    readonly Enabled: "ENABLED";
    readonly Disabled: "DISABLED";
};
type EndUserStatus = typeof EndUserStatus[keyof typeof EndUserStatus];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface PinSecurityDetails
 */
interface PinSecurityDetails {
    /**
     * FailedAttempts the number of times a user has entered an invalid pin code.
     * @type {number}
     * @memberof PinSecurityDetails
     */
    'failedAttempts'?: number;
    /**
     * The date and time when the pin code has been locked.
     * @type {string}
     * @memberof PinSecurityDetails
     */
    'lockedDate'?: string;
    /**
     * The date and time when the pin code will be unlocked.
     * @type {string}
     * @memberof PinSecurityDetails
     */
    'lockedExpiryDate'?: string;
    /**
     * This is the last date and time when the lock was unlocked by admin manually.
     * @type {string}
     * @memberof PinSecurityDetails
     */
    'lastLockOverrideDate'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Status of the user PIN code. PIN must be in ENABLED state to authorize requests.
 * @export
 * @enum {string}
 */
declare const PinStatus: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type PinStatus = typeof PinStatus[keyof typeof PinStatus];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EndUser
 */
interface EndUser {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof EndUser
     */
    'id'?: string;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof EndUser
     */
    'createDate'?: string;
    /**
     *
     * @type {PinStatus}
     * @memberof EndUser
     */
    'pinStatus'?: PinStatus;
    /**
     *
     * @type {EndUserStatus}
     * @memberof EndUser
     */
    'status'?: EndUserStatus;
    /**
     *
     * @type {string}
     * @memberof EndUser
     */
    'securityQuestionStatus'?: EndUserSecurityQuestionStatusEnum;
    /**
     *
     * @type {PinSecurityDetails}
     * @memberof EndUser
     */
    'pinDetails'?: PinSecurityDetails;
    /**
     *
     * @type {PinSecurityDetails}
     * @memberof EndUser
     */
    'securityQuestionDetails'?: PinSecurityDetails;
}
declare const EndUserSecurityQuestionStatusEnum: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type EndUserSecurityQuestionStatusEnum = typeof EndUserSecurityQuestionStatusEnum[keyof typeof EndUserSecurityQuestionStatusEnum];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateContractExecutionTransactionFeeRequest
 */
interface EstimateContractExecutionTransactionFeeRequest {
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<AbiParametersInner>}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'abiParameters'?: Array<AbiParametersInner>;
    /**
     * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'callData'?: string;
    /**
     * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'amount'?: string;
    /**
     *
     * @type {ContractExecutionBlockchain}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'blockchain'?: ContractExecutionBlockchain;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'contractAddress': string;
    /**
     * Source address of the transaction. Required along with `blockchain` if `walletId` is not provided.  The `sourceAddress` and `walletId` fields are mutually exclusive.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'sourceAddress'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TransactionFee
 */
interface TransactionFee {
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof TransactionFee
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'priorityFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the estimated base fee represents the minimum fee required for a transaction to be included in a block on the blockchain.  It is measured in gwei and compensates for the computational resources validators consume to process the transaction.  The base fee is supplemented by a separate \"tip\" called the priority fee, which acts as an extra incentive for validators to prioritize the transaction.  The priority fee is added to the base fee to calculate the final transaction fee.
     * @type {string}
     * @memberof TransactionFee
     */
    'baseFee'?: string;
    /**
     * The estimated network fee is the maximum amount of cryptocurrency (such as ETH, ARB, or SOL) that you will pay for your transaction. This fee depends on the parameters you set, including Gas Limit, Priority Fee, and Max Fee. It compensates for the computational resources that validators consume to process the transaction. It is measured in native token such as ETH, SOL. For blockchains with L1 data fees such as OP/BASE, the network fee is a combination of the Execution Gas Fee and the L1 Data Fee. Each blockchain might use different formula for network fee. Refer to each specific blockchain\'s documentation to understand how `networkFee` is calculated.
     * @type {string}
     * @memberof TransactionFee
     */
    'networkFee'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateTransactionFeeData
 */
interface EstimateTransactionFeeData {
    /**
     *
     * @type {TransactionFee}
     * @memberof EstimateTransactionFeeData
     */
    'high'?: TransactionFee;
    /**
     *
     * @type {TransactionFee}
     * @memberof EstimateTransactionFeeData
     */
    'low'?: TransactionFee;
    /**
     *
     * @type {TransactionFee}
     * @memberof EstimateTransactionFeeData
     */
    'medium'?: TransactionFee;
    /**
     * One of ERC-4337 gas fields. The amount of gas to allocate for the main execution call. Only in smart contract account estimation response.
     * @type {string}
     * @memberof EstimateTransactionFeeData
     */
    'callGasLimit'?: string;
    /**
     * One of ERC-4337 gas fields. The amount of gas to allocate for the verification step. Only in smart contract account estimation response.
     * @type {string}
     * @memberof EstimateTransactionFeeData
     */
    'verificationGasLimit'?: string;
    /**
     * One of ERC-4337 gas fields. The amount of gas to pay to compensate the bundler for pre-verification execution and call data. Only in smart contract account estimation response.
     * @type {string}
     * @memberof EstimateTransactionFeeData
     */
    'preVerificationGas'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateTransactionFee
 */
interface EstimateTransactionFee {
    /**
     *
     * @type {EstimateTransactionFeeData}
     * @memberof EstimateTransactionFee
     */
    'data': EstimateTransactionFeeData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateTransferTransactionFeeRequest
 */
interface EstimateTransferTransactionFeeRequest {
    /**
     * Transfer amounts in decimal number format, at least one element is required for transfer. For ERC721 token transfer, the amounts field is required to be [\"1\"] (array with \"1\" as the only element).
     * @type {Array<string>}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'amounts': Array<string>;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'destinationAddress': string;
    /**
     * List of NFT token IDs corresponding with the NFTs to transfer. Batch transfers are supported only for ERC-1155 tokens. The length of NFT token IDs must match the length of amounts.
     * @type {Array<string>}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'nftTokenIds'?: Array<string>;
    /**
     * Source address of the transaction. Required along with `blockchain` if `walletId` is not provided.  The `sourceAddress` and `walletId` fields are mutually exclusive.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'sourceAddress'?: string;
    /**
     * System generated identifier of the token. Excluded with `tokenAddress` and `tokenBlockchain`.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'tokenId'?: string;
    /**
     * Blockchain address of the transferred token. Empty for native tokens. Excluded with `tokenId`.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'tokenAddress'?: string;
    /**
     *
     * @type {TokenBlockchain}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'blockchain'?: TokenBlockchain;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetUserByIDResponseData
 */
interface GetUserByIDResponseData {
    /**
     *
     * @type {EndUser}
     * @memberof GetUserByIDResponseData
     */
    'user': EndUser;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface GetUserByIDResponse
 */
interface GetUserByIDResponse {
    /**
     *
     * @type {GetUserByIDResponseData}
     * @memberof GetUserByIDResponse
     */
    'data': GetUserByIDResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ModelError
 */
interface ModelError {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Nft
 */
interface Nft {
    /**
     * Amount of NFTs on a wallet. For non-fungible token standards, like ERC721, NonFungible, NonFungibleEdition, ProgrammableNonFungible, ProgrammableNonFungibleEdition, amount will always be “1”; for semi-fungible token standards like ERC1155, amount will correspond to the number of tokens; for FungibleAsset, amount can be greater than \"1\".
     * @type {string}
     * @memberof Nft
     */
    'amount': string;
    /**
     * The metadata of the NFT.
     * @type {string}
     * @memberof Nft
     */
    'metadata'?: string;
    /**
     * The NFT token ID.
     * @type {string}
     * @memberof Nft
     */
    'nftTokenId'?: string;
    /**
     *
     * @type {Token}
     * @memberof Nft
     */
    'token': Token;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Nft
     */
    'updateDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface NftsData
 */
interface NftsData {
    /**
     *
     * @type {Array<Nft>}
     * @memberof NftsData
     */
    'nfts'?: Array<Nft>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Nfts
 */
interface Nfts {
    /**
     *
     * @type {NftsData}
     * @memberof Nfts
     */
    'data': NftsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NotAuthorizedResponse
 */
interface NotAuthorizedResponse {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof NotAuthorizedResponse
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof NotAuthorizedResponse
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NotFoundResponse
 */
interface NotFoundResponse {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof NotFoundResponse
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof NotFoundResponse
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Operation type of the transaction.
 * @export
 * @enum {string}
 */
declare const Operation: {
    readonly Transfer: "TRANSFER";
    readonly ContractExecution: "CONTRACT_EXECUTION";
    readonly ContractDeployment: "CONTRACT_DEPLOYMENT";
};
type Operation = typeof Operation[keyof typeof Operation];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Pin
 */
interface Pin {
    /**
     *
     * @type {PinData}
     * @memberof Pin
     */
    'data': PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface RefreshUserTokenData
 */
interface RefreshUserTokenData {
    /**
     * Unique system generated JWT session token. The token will expire after 60 minutes.
     * @type {string}
     * @memberof RefreshUserTokenData
     */
    'userToken': string;
    /**
     * Encryption key to use with the SDK for initiating user challenges.
     * @type {string}
     * @memberof RefreshUserTokenData
     */
    'encryptionKey'?: string;
    /**
     * Used to identify the user.
     * @type {string}
     * @memberof RefreshUserTokenData
     */
    'userID'?: string;
    /**
     * Use the refresh token passed from sdk/performLogin to get a new userToken. Each refreshToken has a corresponding userToken for verification purposes.
     * @type {string}
     * @memberof RefreshUserTokenData
     */
    'refreshToken'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface RefreshUserToken
 */
interface RefreshUserToken {
    /**
     *
     * @type {RefreshUserTokenData}
     * @memberof RefreshUserToken
     */
    'data': RefreshUserTokenData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface RefreshUserTokenRequest
 */
interface RefreshUserTokenRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof RefreshUserTokenRequest
     */
    'idempotencyKey': string;
    /**
     * Use the refresh token passed from sdk/performLogin to get a new userToken. Each refreshToken has a corresponding userToken for verification purposes.
     * @type {string}
     * @memberof RefreshUserTokenRequest
     */
    'refreshToken': string;
    /**
     * Get the device id from SDK, and the deviceToken is bound with this device id.
     * @type {string}
     * @memberof RefreshUserTokenRequest
     */
    'deviceId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ResendOTPRequest
 */
interface ResendOTPRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof ResendOTPRequest
     */
    'idempotencyKey': string;
    /**
     * The OTP is bound on a user and purpose, and uses this value to identify the request.
     * @type {string}
     * @memberof ResendOTPRequest
     */
    'otpToken': string;
    /**
     * Sends OTP email to the destination address.
     * @type {string}
     * @memberof ResendOTPRequest
     */
    'email': string;
    /**
     * Get the device id from SDK, and the deviceToken is bound with this device id.
     * @type {string}
     * @memberof ResendOTPRequest
     */
    'deviceId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ResentOTPData
 */
interface ResentOTPData {
    /**
     * The OTP is bound on a user and purpose, and uses this value to identify the request.
     * @type {string}
     * @memberof ResentOTPData
     */
    'otpToken': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ResentOTP
 */
interface ResentOTP {
    /**
     *
     * @type {ResentOTPData}
     * @memberof ResentOTP
     */
    'data': ResentOTPData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The category of the associated risk of the blockchain address.
 * @export
 * @enum {string}
 */
declare const RiskCategory: {
    readonly Sanctions: "SANCTIONS";
    readonly Csam: "CSAM";
    readonly IllicitBehavior: "ILLICIT_BEHAVIOR";
    readonly Gambling: "GAMBLING";
    readonly TerroristFinancing: "TERRORIST_FINANCING";
    readonly Unsupported: "UNSUPPORTED";
    readonly Frozen: "FROZEN";
    readonly Other: "OTHER";
    readonly HighRiskIndustry: "HIGH_RISK_INDUSTRY";
    readonly Pep: "PEP";
    readonly Trusted: "TRUSTED";
    readonly Hacking: "HACKING";
    readonly HumanTrafficking: "HUMAN_TRAFFICKING";
    readonly SpecialMeasures: "SPECIAL_MEASURES";
};
type RiskCategory = typeof RiskCategory[keyof typeof RiskCategory];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Risk score of the signal.
 * @export
 * @enum {string}
 */
declare const RiskScore: {
    readonly Unknown: "UNKNOWN";
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
    readonly Severe: "SEVERE";
    readonly Blocklist: "BLOCKLIST";
};
type RiskScore = typeof RiskScore[keyof typeof RiskScore];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Type of the signal.
 * @export
 * @enum {string}
 */
declare const RiskType: {
    readonly Ownership: "OWNERSHIP";
    readonly Counterparty: "COUNTERPARTY";
    readonly Indirect: "INDIRECT";
};
type RiskType = typeof RiskType[keyof typeof RiskType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Risk signal that includes source, value, and risk type, risk score and risk category.
 * @export
 * @interface RiskSignal
 */
interface RiskSignal {
    /**
     * Source of the risk signal.
     * @type {string}
     * @memberof RiskSignal
     */
    'source': RiskSignalSourceEnum;
    /**
     * Value of the source. For example, if source is “ADDRESS”. The source value would be an blockchain address.
     * @type {string}
     * @memberof RiskSignal
     */
    'sourceValue': string;
    /**
     *
     * @type {RiskScore}
     * @memberof RiskSignal
     */
    'riskScore': RiskScore;
    /**
     * List of risk categories for the signal.
     * @type {Array<RiskCategory>}
     * @memberof RiskSignal
     */
    'riskCategories': Array<RiskCategory>;
    /**
     *
     * @type {RiskType}
     * @memberof RiskSignal
     */
    'type': RiskType;
}
declare const RiskSignalSourceEnum: {
    readonly Address: "ADDRESS";
    readonly Blockchain: "BLOCKCHAIN";
    readonly Asset: "ASSET";
};
type RiskSignalSourceEnum = typeof RiskSignalSourceEnum[keyof typeof RiskSignalSourceEnum];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type SCAWallet
 * @export
 */
type SCAWallet = Wallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * SCAs have different versions, each with unique functionality. `SCACore` displays the version of the SCA being created. For a list of supported versions, refer to the developer documentation.
 * @export
 * @enum {string}
 */
declare const ScaCore: {
    readonly _4337V1: "circle_4337_v1";
    readonly _6900SingleownerV1: "circle_6900_singleowner_v1";
    readonly _6900SingleownerV2: "circle_6900_singleowner_v2";
    readonly _6900SingleownerV3: "circle_6900_singleowner_v3";
};
type ScaCore = typeof ScaCore[keyof typeof ScaCore];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SetPinAndInitWalletRequest
 */
interface SetPinAndInitWalletRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof SetPinAndInitWalletRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {AccountType}
     * @memberof SetPinAndInitWalletRequest
     */
    'accountType'?: AccountType;
    /**
     * Blockchain(s) the requested wallets will be created on.
     * @type {Array<Blockchain>}
     * @memberof SetPinAndInitWalletRequest
     */
    'blockchains'?: Array<Blockchain>;
    /**
     * List of metadata fields to associate with the corresponding wallet.
     * @type {Array<WalletMetadata>}
     * @memberof SetPinAndInitWalletRequest
     */
    'metadata'?: Array<WalletMetadata>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SetPinRequest
 */
interface SetPinRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof SetPinRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignMessageRequest
 */
interface SignMessageRequest {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof SignMessageRequest
     */
    'walletId': string;
    /**
     * Indicator of whether the input message is encoded by hex. If TRUE, then the message should be a hex string. By default, it is False.
     * @type {boolean}
     * @memberof SignMessageRequest
     */
    'encodedByHex'?: boolean;
    /**
     * The user friendly message that needs to be signed. If it is a hex string, encodedByHex needs to be TRUE. The hex string should start with “0x” and have even length.
     * @type {string}
     * @memberof SignMessageRequest
     */
    'message': string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignMessageRequest
     */
    'memo'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignTransactionResponse
 */
interface SignTransactionResponse {
    /**
     *
     * @type {PinData}
     * @memberof SignTransactionResponse
     */
    'data': PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignTypedDataRequest
 */
interface SignTypedDataRequest {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof SignTypedDataRequest
     */
    'walletId': string;
    /**
     * A string represents the typed structured data in EIP-712
     * @type {string}
     * @memberof SignTypedDataRequest
     */
    'data': string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignTypedDataRequest
     */
    'memo'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignUserTransactionRequest
 */
interface SignUserTransactionRequest {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof SignUserTransactionRequest
     */
    'walletId': string;
    /**
     * Raw transaction string that needs to be signed. Excluded with `transaction`. Required without `transaction`. Required to be base64 encoded for NEAR, Solana chains. Required to be hex encoded for EVM chains.
     * @type {string}
     * @memberof SignUserTransactionRequest
     */
    'rawTransaction'?: string;
    /**
     * Transaction object in JSON that needs to be signed. Excluded with `rawTransaction`. Required without `rawTransaction`.  NOTE: This field is only supported by `EVM` chains.
     * @type {string}
     * @memberof SignUserTransactionRequest
     */
    'transaction'?: string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignUserTransactionRequest
     */
    'memo'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Signature
 */
interface Signature {
    /**
     *
     * @type {PinData}
     * @memberof Signature
     */
    'data': PinData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TokenResponseData
 */
interface TokenResponseData {
    /**
     *
     * @type {Token}
     * @memberof TokenResponseData
     */
    'token'?: Token;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TokenResponse
 */
interface TokenResponse {
    /**
     *
     * @type {TokenResponseData}
     * @memberof TokenResponse
     */
    'data'?: TokenResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type TransactionScreeningDecision
 * Transaction decision detail about matched rule, actions to take, and all related risk signals.
 * @export
 */
type TransactionScreeningDecision = BaseScreeningDecision;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Current state of the transaction.
 * @export
 * @enum {string}
 */
declare const TransactionState: {
    readonly Cancelled: "CANCELLED";
    readonly Confirmed: "CONFIRMED";
    readonly Complete: "COMPLETE";
    readonly Denied: "DENIED";
    readonly Failed: "FAILED";
    readonly Initiated: "INITIATED";
    readonly PendingRiskScreening: "PENDING_RISK_SCREENING";
    readonly Queued: "QUEUED";
    readonly Sent: "SENT";
};
type TransactionState = typeof TransactionState[keyof typeof TransactionState];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const TransactionType: {
    readonly Inbound: "INBOUND";
    readonly Outbound: "OUTBOUND";
};
type TransactionType = typeof TransactionType[keyof typeof TransactionType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Transaction
 */
interface Transaction {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Transaction
     */
    'id': string;
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof Transaction
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<AbiParametersInner>}
     * @memberof Transaction
     */
    'abiParameters'?: Array<AbiParametersInner>;
    /**
     * Transfer amounts in decimal number format, at least one element is required for transfer. For ERC721 token transfer, the amounts field is required to be [\"1\"] (array with \"1\" as the only element).
     * @type {Array<string>}
     * @memberof Transaction
     */
    'amounts'?: Array<string>;
    /**
     * Transaction amount in USD decimal format.
     * @type {string}
     * @memberof Transaction
     */
    'amountInUSD'?: string;
    /**
     * Identifier for the block that includes the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'blockHash'?: string;
    /**
     * Block height of the transaction, representing the number of blockchain confirmations.
     * @type {number}
     * @memberof Transaction
     */
    'blockHeight'?: number;
    /**
     *
     * @type {Blockchain}
     * @memberof Transaction
     */
    'blockchain': Blockchain;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof Transaction
     */
    'contractAddress'?: string;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Transaction
     */
    'createDate': string;
    /**
     *
     * @type {CustodyType}
     * @memberof Transaction
     */
    'custodyType'?: CustodyType;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Transaction
     */
    'destinationAddress'?: string;
    /**
     * Description of the error. Only present for transactions in `FAILED` state.
     * @type {string}
     * @memberof Transaction
     */
    'errorReason'?: string;
    /**
     * Additional detail associated with the corresponding transaction\'s error reason
     * @type {string}
     * @memberof Transaction
     */
    'errorDetails'?: string;
    /**
     *
     * @type {TransactionFee}
     * @memberof Transaction
     */
    'estimatedFee'?: TransactionFee;
    /**
     *
     * @type {FeeLevel}
     * @memberof Transaction
     */
    'feeLevel'?: FeeLevel;
    /**
     * Date the transaction was first confirmed in a block. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof Transaction
     */
    'firstConfirmDate'?: string;
    /**
     * Gas fee, in native token, paid to the network for the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'networkFee'?: string;
    /**
     * Gas fee, in USD, paid to the network for the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'networkFeeInUSD'?: string;
    /**
     * List of Nfts, in JSON string format, associated with the transaction.
     * @type {Array<string>}
     * @memberof Transaction
     */
    'nfts'?: Array<string>;
    /**
     *
     * @type {Operation}
     * @memberof Transaction
     */
    'operation'?: Operation;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'refId'?: string;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Transaction
     */
    'sourceAddress'?: string;
    /**
     *
     * @type {TransactionState}
     * @memberof Transaction
     */
    'state': TransactionState;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Transaction
     */
    'tokenId'?: string;
    /**
     *
     * @type {TransactionType}
     * @memberof Transaction
     */
    'transactionType': TransactionType;
    /**
     * Blockchain generated identifier of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'txHash'?: string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Transaction
     */
    'updateDate': string;
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof Transaction
     */
    'userId'?: string;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Transaction
     */
    'walletId'?: string;
    /**
     *
     * @type {TransactionScreeningDecision}
     * @memberof Transaction
     */
    'transactionScreeningEvaluation'?: TransactionScreeningDecision;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TransactionResponseData
 */
interface TransactionResponseData {
    /**
     *
     * @type {Transaction}
     * @memberof TransactionResponseData
     */
    'transaction'?: Transaction;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TransactionResponse
 */
interface TransactionResponse {
    /**
     *
     * @type {TransactionResponseData}
     * @memberof TransactionResponse
     */
    'data': TransactionResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TransactionsData
 */
interface TransactionsData {
    /**
     *
     * @type {Array<Transaction>}
     * @memberof TransactionsData
     */
    'transactions'?: Array<Transaction>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Transactions
 */
interface Transactions {
    /**
     *
     * @type {TransactionsData}
     * @memberof Transactions
     */
    'data'?: TransactionsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UpdateWalletRequest
 */
interface UpdateWalletRequest {
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof UpdateWalletRequest
     */
    'name'?: string;
    /**
     * Reference or description used to identify the object.
     * @type {string}
     * @memberof UpdateWalletRequest
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface UserResponse
 */
interface UserResponse {
    /**
     *
     * @type {EndUser}
     * @memberof UserResponse
     */
    'data': EndUser;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UserTokenRequest
 */
interface UserTokenRequest {
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof UserTokenRequest
     */
    'userId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UserTokenResponseData
 */
interface UserTokenResponseData {
    /**
     * Unique system generated JWT session token. The token will expire after 60 minutes.
     * @type {string}
     * @memberof UserTokenResponseData
     */
    'userToken': string;
    /**
     * Encryption key to use with the SDK for initiating user challenges.
     * @type {string}
     * @memberof UserTokenResponseData
     */
    'encryptionKey'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface UserTokenResponse
 */
interface UserTokenResponse {
    /**
     *
     * @type {UserTokenResponseData}
     * @memberof UserTokenResponse
     */
    'data': UserTokenResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface UsersData
 */
interface UsersData {
    /**
     *
     * @type {Array<EndUser>}
     * @memberof UsersData
     */
    'users': Array<EndUser>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Users
 */
interface Users {
    /**
     *
     * @type {UsersData}
     * @memberof Users
     */
    'data': UsersData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ValidateAddressData
 */
interface ValidateAddressData {
    /**
     *
     * @type {boolean}
     * @memberof ValidateAddressData
     */
    'isValid': boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ValidateAddress
 */
interface ValidateAddress {
    /**
     *
     * @type {ValidateAddressData}
     * @memberof ValidateAddress
     */
    'data': ValidateAddressData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ValidateAddressRequest
 */
interface ValidateAddressRequest {
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof ValidateAddressRequest
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof ValidateAddressRequest
     */
    'blockchain': Blockchain;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type WalletResponseDataWallet
 * @export
 */
type WalletResponseDataWallet = EOAWallet | SCAWallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletResponseData
 */
interface WalletResponseData {
    /**
     *
     * @type {WalletResponseDataWallet}
     * @memberof WalletResponseData
     */
    'wallet': WalletResponseDataWallet;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletResponse
 */
interface WalletResponse {
    /**
     *
     * @type {WalletResponseData}
     * @memberof WalletResponse
     */
    'data': WalletResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletsData
 */
interface WalletsData {
    /**
     *
     * @type {Array<WalletResponseDataWallet>}
     * @memberof WalletsData
     */
    'wallets': Array<WalletResponseDataWallet>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Wallets
 */
interface Wallets {
    /**
     *
     * @type {WalletsData}
     * @memberof Wallets
     */
    'data': WalletsData;
}

/**
 * PINAuthenticationApi - axios parameter creator
 * @export
 */
declare const PINAuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (createUserRequest: CreateUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a challenge for PIN setup without setting up the wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinChallenge: (xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a challenge to restore a user\'s PIN using security questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinRestoreChallenge: (xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {UserTokenRequest} userTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken: (userTokenRequest: UserTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a challenge to update a user\'s PIN using the current PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPinChallenge: (xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PINAuthenticationApi - functional programming interface
 * @export
 */
declare const PINAuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>>;
    /**
     * Creates a challenge for PIN setup without setting up the wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>>;
    /**
     * Creates a challenge to restore a user\'s PIN using security questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinRestoreChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {UserTokenRequest} userTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken(userTokenRequest: UserTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTokenResponse>>;
    /**
     * Creates a challenge to update a user\'s PIN using the current PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>>;
};
/**
 * PINAuthenticationApi - factory interface
 * @export
 */
declare const PINAuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUserRequest: CreateUserRequest, options?: any): AxiosPromise<UserResponse>;
    /**
     * Creates a challenge for PIN setup without setting up the wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: any): AxiosPromise<Pin>;
    /**
     * Creates a challenge to restore a user\'s PIN using security questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPinRestoreChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: any): AxiosPromise<Pin>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {UserTokenRequest} userTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserToken(userTokenRequest: UserTokenRequest, options?: any): AxiosPromise<UserTokenResponse>;
    /**
     * Creates a challenge to update a user\'s PIN using the current PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: any): AxiosPromise<Pin>;
};
/**
 * PINAuthenticationApi - object-oriented interface
 * @export
 * @class PINAuthenticationApi
 * @extends {BaseAPI}
 */
declare class PINAuthenticationApi extends BaseAPI {
    /**
     * Create a user.
     * @summary Create a user
     * @param {CreateUserRequest} createUserRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PINAuthenticationApi
     */
    createUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<UserResponse, any>>;
    /**
     * Creates a challenge for PIN setup without setting up the wallets.
     * @summary Create a challenge for PIN setup
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PINAuthenticationApi
     */
    createUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Pin, any>>;
    /**
     * Creates a challenge to restore a user\'s PIN using security questions.
     * @summary Create a challenge for PIN restore
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PINAuthenticationApi
     */
    createUserPinRestoreChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Pin, any>>;
    /**
     * Generate user session and SDK secret key.
     * @summary Create a user token
     * @param {UserTokenRequest} userTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PINAuthenticationApi
     */
    getUserToken(userTokenRequest: UserTokenRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<UserTokenResponse, any>>;
    /**
     * Creates a challenge to update a user\'s PIN using the current PIN.
     * @summary Create a challenge to update PIN
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinRequest} setPinRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PINAuthenticationApi
     */
    updateUserPinChallenge(xUserToken: string, setPinRequest: SetPinRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Pin, any>>;
}

/**
 * SigningApi - axios parameter creator
 * @export
 */
declare const SigningApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generates a challenge for signing a message from a specified user-controlled wallet. This endpoint supports Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignMessageRequest} signMessageRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserMessage: (xUserToken: string, signMessageRequest: SignMessageRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generate a challenge for signing the transaction from a specific user-controlled wallet.    NOTE: This endpoint supports the following blockchains: SOL, SOL-DEVNET, EVM, EVM-TESTNET. Each chain defines its own standard. For more details, see [Signing APIs](https://developers.circle.com/w3s/signing-apis).
     * @summary Create a challenge to sign transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignUserTransactionRequest} signUserTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTransaction: (xUserToken: string, signUserTransactionRequest: SignUserTransactionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignTypedDataRequest} signTypedDataRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTypedData: (xUserToken: string, signTypedDataRequest: SignTypedDataRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SigningApi - functional programming interface
 * @export
 */
declare const SigningApiFp: (configuration?: Configuration) => {
    /**
     * Generates a challenge for signing a message from a specified user-controlled wallet. This endpoint supports Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignMessageRequest} signMessageRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserMessage(xUserToken: string, signMessageRequest: SignMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signature>>;
    /**
     * Generate a challenge for signing the transaction from a specific user-controlled wallet.    NOTE: This endpoint supports the following blockchains: SOL, SOL-DEVNET, EVM, EVM-TESTNET. Each chain defines its own standard. For more details, see [Signing APIs](https://developers.circle.com/w3s/signing-apis).
     * @summary Create a challenge to sign transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignUserTransactionRequest} signUserTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTransaction(xUserToken: string, signUserTransactionRequest: SignUserTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignTransactionResponse>>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignTypedDataRequest} signTypedDataRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTypedData(xUserToken: string, signTypedDataRequest: SignTypedDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signature>>;
};
/**
 * SigningApi - factory interface
 * @export
 */
declare const SigningApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generates a challenge for signing a message from a specified user-controlled wallet. This endpoint supports Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignMessageRequest} signMessageRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserMessage(xUserToken: string, signMessageRequest: SignMessageRequest, options?: any): AxiosPromise<Signature>;
    /**
     * Generate a challenge for signing the transaction from a specific user-controlled wallet.    NOTE: This endpoint supports the following blockchains: SOL, SOL-DEVNET, EVM, EVM-TESTNET. Each chain defines its own standard. For more details, see [Signing APIs](https://developers.circle.com/w3s/signing-apis).
     * @summary Create a challenge to sign transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignUserTransactionRequest} signUserTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTransaction(xUserToken: string, signUserTransactionRequest: SignUserTransactionRequest, options?: any): AxiosPromise<SignTransactionResponse>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignTypedDataRequest} signTypedDataRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUserTypedData(xUserToken: string, signTypedDataRequest: SignTypedDataRequest, options?: any): AxiosPromise<Signature>;
};
/**
 * SigningApi - object-oriented interface
 * @export
 * @class SigningApi
 * @extends {BaseAPI}
 */
declare class SigningApi extends BaseAPI {
    /**
     * Generates a challenge for signing a message from a specified user-controlled wallet. This endpoint supports Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign message
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignMessageRequest} signMessageRequest Sign message for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signUserMessage(xUserToken: string, signMessageRequest: SignMessageRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Signature, any>>;
    /**
     * Generate a challenge for signing the transaction from a specific user-controlled wallet.    NOTE: This endpoint supports the following blockchains: SOL, SOL-DEVNET, EVM, EVM-TESTNET. Each chain defines its own standard. For more details, see [Signing APIs](https://developers.circle.com/w3s/signing-apis).
     * @summary Create a challenge to sign transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignUserTransactionRequest} signUserTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signUserTransaction(xUserToken: string, signUserTransactionRequest: SignUserTransactionRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<SignTransactionResponse, any>>;
    /**
     * Generates a challenge for signing the EIP-712 typed structured data from a specified user-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Create a challenge to sign typed data
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SignTypedDataRequest} signTypedDataRequest Sign typed data for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signUserTypedData(xUserToken: string, signTypedDataRequest: SignTypedDataRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Signature, any>>;
}

/**
 * SocialEmailAuthenticationApi - axios parameter creator
 * @export
 */
declare const SocialEmailAuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a deviceToken to login with email OTP in SDK
     * @summary Get a deviceToken to log in with email OTP
     * @param {DeviceTokenEmailRequest} deviceTokenEmailRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceTokenEmailLogin: (deviceTokenEmailRequest: DeviceTokenEmailRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get deviceToken to perform social login in SDK
     * @summary Get deviceToken to perform social login
     * @param {DeviceTokenSocialRequest} deviceTokenSocialRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceTokenSocialLogin: (deviceTokenSocialRequest: DeviceTokenSocialRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a new userToken with the refreshToken passed over from sdk/performLogin which matches to the current userToken
     * @summary Get a new userToken with the refreshToken
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {RefreshUserTokenRequest} refreshUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshUserToken: (xUserToken: string, refreshUserTokenRequest: RefreshUserTokenRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When the users don’t receive the OTP email,  you can call this API to resend OTP email. The prior OTP email would expire after the new one is sent out.
     * @summary Resend an OTP email to the user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ResendOTPRequest} resendOTPRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendOTP: (xUserToken: string, resendOTPRequest: ResendOTPRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SocialEmailAuthenticationApi - functional programming interface
 * @export
 */
declare const SocialEmailAuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Get a deviceToken to login with email OTP in SDK
     * @summary Get a deviceToken to log in with email OTP
     * @param {DeviceTokenEmailRequest} deviceTokenEmailRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceTokenEmailLogin(deviceTokenEmailRequest: DeviceTokenEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceTokenEmail>>;
    /**
     * Get deviceToken to perform social login in SDK
     * @summary Get deviceToken to perform social login
     * @param {DeviceTokenSocialRequest} deviceTokenSocialRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceTokenSocialLogin(deviceTokenSocialRequest: DeviceTokenSocialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceTokenSocial>>;
    /**
     * Get a new userToken with the refreshToken passed over from sdk/performLogin which matches to the current userToken
     * @summary Get a new userToken with the refreshToken
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {RefreshUserTokenRequest} refreshUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshUserToken(xUserToken: string, refreshUserTokenRequest: RefreshUserTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshUserToken>>;
    /**
     * When the users don’t receive the OTP email,  you can call this API to resend OTP email. The prior OTP email would expire after the new one is sent out.
     * @summary Resend an OTP email to the user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ResendOTPRequest} resendOTPRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendOTP(xUserToken: string, resendOTPRequest: ResendOTPRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResentOTP>>;
};
/**
 * SocialEmailAuthenticationApi - factory interface
 * @export
 */
declare const SocialEmailAuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a deviceToken to login with email OTP in SDK
     * @summary Get a deviceToken to log in with email OTP
     * @param {DeviceTokenEmailRequest} deviceTokenEmailRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceTokenEmailLogin(deviceTokenEmailRequest: DeviceTokenEmailRequest, options?: any): AxiosPromise<DeviceTokenEmail>;
    /**
     * Get deviceToken to perform social login in SDK
     * @summary Get deviceToken to perform social login
     * @param {DeviceTokenSocialRequest} deviceTokenSocialRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeviceTokenSocialLogin(deviceTokenSocialRequest: DeviceTokenSocialRequest, options?: any): AxiosPromise<DeviceTokenSocial>;
    /**
     * Get a new userToken with the refreshToken passed over from sdk/performLogin which matches to the current userToken
     * @summary Get a new userToken with the refreshToken
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {RefreshUserTokenRequest} refreshUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshUserToken(xUserToken: string, refreshUserTokenRequest: RefreshUserTokenRequest, options?: any): AxiosPromise<RefreshUserToken>;
    /**
     * When the users don’t receive the OTP email,  you can call this API to resend OTP email. The prior OTP email would expire after the new one is sent out.
     * @summary Resend an OTP email to the user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ResendOTPRequest} resendOTPRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendOTP(xUserToken: string, resendOTPRequest: ResendOTPRequest, options?: any): AxiosPromise<ResentOTP>;
};
/**
 * SocialEmailAuthenticationApi - object-oriented interface
 * @export
 * @class SocialEmailAuthenticationApi
 * @extends {BaseAPI}
 */
declare class SocialEmailAuthenticationApi extends BaseAPI {
    /**
     * Get a deviceToken to login with email OTP in SDK
     * @summary Get a deviceToken to log in with email OTP
     * @param {DeviceTokenEmailRequest} deviceTokenEmailRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialEmailAuthenticationApi
     */
    createDeviceTokenEmailLogin(deviceTokenEmailRequest: DeviceTokenEmailRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<DeviceTokenEmail, any>>;
    /**
     * Get deviceToken to perform social login in SDK
     * @summary Get deviceToken to perform social login
     * @param {DeviceTokenSocialRequest} deviceTokenSocialRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialEmailAuthenticationApi
     */
    createDeviceTokenSocialLogin(deviceTokenSocialRequest: DeviceTokenSocialRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<DeviceTokenSocial, any>>;
    /**
     * Get a new userToken with the refreshToken passed over from sdk/performLogin which matches to the current userToken
     * @summary Get a new userToken with the refreshToken
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {RefreshUserTokenRequest} refreshUserTokenRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialEmailAuthenticationApi
     */
    refreshUserToken(xUserToken: string, refreshUserTokenRequest: RefreshUserTokenRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<RefreshUserToken, any>>;
    /**
     * When the users don’t receive the OTP email,  you can call this API to resend OTP email. The prior OTP email would expire after the new one is sent out.
     * @summary Resend an OTP email to the user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ResendOTPRequest} resendOTPRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialEmailAuthenticationApi
     */
    resendOTP(xUserToken: string, resendOTPRequest: ResendOTPRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ResentOTP, any>>;
}

/**
 * TokenLookupApi - axios parameter creator
 * @export
 */
declare const TokenLookupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokenLookupApi - functional programming interface
 * @export
 */
declare const TokenLookupApiFp: (configuration?: Configuration) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>>;
};
/**
 * TokenLookupApi - factory interface
 * @export
 */
declare const TokenLookupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId(id: string, options?: any): AxiosPromise<TokenResponse>;
};
/**
 * TokenLookupApi - object-oriented interface
 * @export
 * @class TokenLookupApi
 * @extends {BaseAPI}
 */
declare class TokenLookupApi extends BaseAPI {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenLookupApi
     */
    getTokenId(id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<TokenResponse, any>>;
}

/**
 * TransactionsApi - axios parameter creator
 * @export
 */
declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee: (xUserToken: string, estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee: (xUserToken: string, estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge to accelerate a specific transaction from a user-controlled wallet. Additional gas fees may apply.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to accelerate.
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionAccelerateChallenge: (xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge to cancel a specific transaction from a user-controlled wallet. Gas fees may still apply.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to cancel.
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionCancelChallenge: (xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateContractExecutionTransactionForEndUserRequest} createContractExecutionTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionContractExecutionChallenge: (xUserToken: string, createContractExecutionTransactionForEndUserRequest: CreateContractExecutionTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionTransferChallenge: (xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Generates a challenge to create a transaction that upgrades a wallet.
     * @summary Create a challenge for a wallet upgrade
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateWalletUpgradeTransactionForEndUserRequest} createWalletUpgradeTransactionForEndUserRequest Creates a transaction for an end-user request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionWalletUpgradeChallenge: (xUserToken: string, createWalletUpgradeTransactionForEndUserRequest: CreateWalletUpgradeTransactionForEndUserRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress: (validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction: (id: string, xUserToken: string, txType?: TransactionType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [userId] Filter by user\&#39;s system generated identifiers.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions: (xUserToken: string, blockchain?: Blockchain, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee(xUserToken: string, estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateTransactionFee>>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee(xUserToken: string, estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateTransactionFee>>;
    /**
     * Generates a challenge to accelerate a specific transaction from a user-controlled wallet. Additional gas fees may apply.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to accelerate.
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionAccelerateChallenge(xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccelerateTransactionForEndUserResponse>>;
    /**
     * Generates a challenge to cancel a specific transaction from a user-controlled wallet. Gas fees may still apply.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to cancel.
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionCancelChallenge(xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTransactionForEndUserResponse>>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateContractExecutionTransactionForEndUserRequest} createContractExecutionTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionContractExecutionChallenge(xUserToken: string, createContractExecutionTransactionForEndUserRequest: CreateContractExecutionTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContractExecutionTransactionForEndUserResponse>>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionTransferChallenge(xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransferTransactionForEndUserResponse>>;
    /**
     * Generates a challenge to create a transaction that upgrades a wallet.
     * @summary Create a challenge for a wallet upgrade
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateWalletUpgradeTransactionForEndUserRequest} createWalletUpgradeTransactionForEndUserRequest Creates a transaction for an end-user request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionWalletUpgradeChallenge(xUserToken: string, createWalletUpgradeTransactionForEndUserRequest: CreateWalletUpgradeTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWalletUpgradeTransactionForEndUserResponse>>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateAddress>>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, xUserToken: string, txType?: TransactionType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [userId] Filter by user\&#39;s system generated identifiers.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(xUserToken: string, blockchain?: Blockchain, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactions>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee(xUserToken: string, estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: any): AxiosPromise<EstimateTransactionFee>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee(xUserToken: string, estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: any): AxiosPromise<EstimateTransactionFee>;
    /**
     * Generates a challenge to accelerate a specific transaction from a user-controlled wallet. Additional gas fees may apply.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to accelerate.
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionAccelerateChallenge(xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: any): AxiosPromise<AccelerateTransactionForEndUserResponse>;
    /**
     * Generates a challenge to cancel a specific transaction from a user-controlled wallet. Gas fees may still apply.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to cancel.
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionCancelChallenge(xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: any): AxiosPromise<CancelTransactionForEndUserResponse>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateContractExecutionTransactionForEndUserRequest} createContractExecutionTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionContractExecutionChallenge(xUserToken: string, createContractExecutionTransactionForEndUserRequest: CreateContractExecutionTransactionForEndUserRequest, options?: any): AxiosPromise<CreateContractExecutionTransactionForEndUserResponse>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionTransferChallenge(xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: any): AxiosPromise<CreateTransferTransactionForEndUserResponse>;
    /**
     * Generates a challenge to create a transaction that upgrades a wallet.
     * @summary Create a challenge for a wallet upgrade
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateWalletUpgradeTransactionForEndUserRequest} createWalletUpgradeTransactionForEndUserRequest Creates a transaction for an end-user request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserTransactionWalletUpgradeChallenge(xUserToken: string, createWalletUpgradeTransactionForEndUserRequest: CreateWalletUpgradeTransactionForEndUserRequest, options?: any): AxiosPromise<CreateWalletUpgradeTransactionForEndUserResponse>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: any): AxiosPromise<ValidateAddress>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, xUserToken: string, txType?: TransactionType, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [userId] Filter by user\&#39;s system generated identifiers.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(xUserToken: string, blockchain?: Blockchain, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Transactions>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
declare class TransactionsApi extends BaseAPI {
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransactionEstimateFee(xUserToken: string, estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EstimateTransactionFee, any>>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransferEstimateFee(xUserToken: string, estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EstimateTransactionFee, any>>;
    /**
     * Generates a challenge to accelerate a specific transaction from a user-controlled wallet. Additional gas fees may apply.
     * @summary Create a Challenge to accelerate a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to accelerate.
     * @param {AccelerateTransactionForEndUserRequest} accelerateTransactionForEndUserRequest Accelerate transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionAccelerateChallenge(xUserToken: string, id: string, accelerateTransactionForEndUserRequest: AccelerateTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<AccelerateTransactionForEndUserResponse, any>>;
    /**
     * Generates a challenge to cancel a specific transaction from a user-controlled wallet. Gas fees may still apply.
     * @summary Create a challenge to cancel a transaction
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The ID of the transaction to cancel.
     * @param {CancelTransactionForEndUserRequest} cancelTransactionForEndUserRequest Cancel transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionCancelChallenge(xUserToken: string, id: string, cancelTransactionForEndUserRequest: CancelTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CancelTransactionForEndUserResponse, any>>;
    /**
     * Generates a challenge for creating a transaction which executes a smart contract. ABI parameters must be passed in the request.
     * @summary Create a challenge for contract execution
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateContractExecutionTransactionForEndUserRequest} createContractExecutionTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionContractExecutionChallenge(xUserToken: string, createContractExecutionTransactionForEndUserRequest: CreateContractExecutionTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateContractExecutionTransactionForEndUserResponse, any>>;
    /**
     * Generates a challenge for initiating an on-chain digital asset transfer from a specified user-controlled wallet
     * @summary Create a challenge for a transfer
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateTransferTransactionForEndUserRequest} createTransferTransactionForEndUserRequest Create transaction for end user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionTransferChallenge(xUserToken: string, createTransferTransactionForEndUserRequest: CreateTransferTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateTransferTransactionForEndUserResponse, any>>;
    /**
     * Generates a challenge to create a transaction that upgrades a wallet.
     * @summary Create a challenge for a wallet upgrade
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateWalletUpgradeTransactionForEndUserRequest} createWalletUpgradeTransactionForEndUserRequest Creates a transaction for an end-user request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createUserTransactionWalletUpgradeChallenge(xUserToken: string, createWalletUpgradeTransactionForEndUserRequest: CreateWalletUpgradeTransactionForEndUserRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateWalletUpgradeTransactionForEndUserResponse, any>>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ValidateAddress, any>>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id Transaction id
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransaction(id: string, xUserToken: string, txType?: TransactionType, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<TransactionResponse, any>>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [userId] Filter by user\&#39;s system generated identifiers.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    listTransactions(xUserToken: string, blockchain?: Blockchain, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, userId?: string, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Transactions, any>>;
}
/**
 * @export
 */
declare const ListTransactionsOperationEnum: {
    readonly Transfer: "TRANSFER";
    readonly ContractExecution: "CONTRACT_EXECUTION";
};
type ListTransactionsOperationEnum = typeof ListTransactionsOperationEnum[keyof typeof ListTransactionsOperationEnum];

/**
 * UsersApi - axios parameter creator
 * @export
 */
declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a challenge for user initialization and creates one or more wallets.
     * @summary Create a challenge for user initialization with wallet creation
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWithPinChallenge: (xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get user by ID.
     * @summary Get a user by ID
     * @param {string} id Filter by user\&#39;s system generated identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the user by token.
     * @summary Get user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByToken: (xUserToken: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a user challenge.
     * @summary Get a challenge
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserChallenge: (xUserToken: string, id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ListUserChallengesStatusEnum} [status] Filter by external challenge status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserChallenges: (xUserToken: string, status?: ListUserChallengesStatusEnum, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] Filter by the PIN status of the wallet.
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] Filter by the security question status of the wallet.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Creates a challenge for user initialization and creates one or more wallets.
     * @summary Create a challenge for user initialization with wallet creation
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWithPinChallenge(xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>>;
    /**
     * Get user by ID.
     * @summary Get a user by ID
     * @param {string} id Filter by user\&#39;s system generated identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserByIDResponse>>;
    /**
     * Retrieve the user by token.
     * @summary Get user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByToken(xUserToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>>;
    /**
     * Retrieve a user challenge.
     * @summary Get a challenge
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserChallenge(xUserToken: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChallengeResponse>>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ListUserChallengesStatusEnum} [status] Filter by external challenge status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserChallenges(xUserToken: string, status?: ListUserChallengesStatusEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Challenges>>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] Filter by the PIN status of the wallet.
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] Filter by the security question status of the wallet.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Users>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a challenge for user initialization and creates one or more wallets.
     * @summary Create a challenge for user initialization with wallet creation
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWithPinChallenge(xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: any): AxiosPromise<Pin>;
    /**
     * Get user by ID.
     * @summary Get a user by ID
     * @param {string} id Filter by user\&#39;s system generated identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: any): AxiosPromise<GetUserByIDResponse>;
    /**
     * Retrieve the user by token.
     * @summary Get user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByToken(xUserToken: string, options?: any): AxiosPromise<UserResponse>;
    /**
     * Retrieve a user challenge.
     * @summary Get a challenge
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserChallenge(xUserToken: string, id: string, options?: any): AxiosPromise<ChallengeResponse>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ListUserChallengesStatusEnum} [status] Filter by external challenge status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserChallenges(xUserToken: string, status?: ListUserChallengesStatusEnum, options?: any): AxiosPromise<Challenges>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] Filter by the PIN status of the wallet.
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] Filter by the security question status of the wallet.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Users>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
declare class UsersApi extends BaseAPI {
    /**
     * Creates a challenge for user initialization and creates one or more wallets.
     * @summary Create a challenge for user initialization with wallet creation
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {SetPinAndInitWalletRequest} setPinAndInitWalletRequest Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUserWithPinChallenge(xUserToken: string, setPinAndInitWalletRequest: SetPinAndInitWalletRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Pin, any>>;
    /**
     * Get user by ID.
     * @summary Get a user by ID
     * @param {string} id Filter by user\&#39;s system generated identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<GetUserByIDResponse, any>>;
    /**
     * Retrieve the user by token.
     * @summary Get user
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserByToken(xUserToken: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<UserResponse, any>>;
    /**
     * Retrieve a user challenge.
     * @summary Get a challenge
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserChallenge(xUserToken: string, id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ChallengeResponse, any>>;
    /**
     * List all challenges by status for a user.
     * @summary List challenges
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {ListUserChallengesStatusEnum} [status] Filter by external challenge status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUserChallenges(xUserToken: string, status?: ListUserChallengesStatusEnum, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Challenges, any>>;
    /**
     * Get all the users under the entity, sorted by the create date DESC order.
     * @summary List users
     * @param {ListUsersPinStatusEnum} [pinStatus] Filter by the PIN status of the wallet.
     * @param {ListUsersSecurityQuestionStatusEnum} [securityQuestionStatus] Filter by the security question status of the wallet.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(pinStatus?: ListUsersPinStatusEnum, securityQuestionStatus?: ListUsersSecurityQuestionStatusEnum, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Users, any>>;
}
/**
 * @export
 */
declare const ListUserChallengesStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
};
type ListUserChallengesStatusEnum = typeof ListUserChallengesStatusEnum[keyof typeof ListUserChallengesStatusEnum];
/**
 * @export
 */
declare const ListUsersPinStatusEnum: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type ListUsersPinStatusEnum = typeof ListUsersPinStatusEnum[keyof typeof ListUsersPinStatusEnum];
/**
 * @export
 */
declare const ListUsersSecurityQuestionStatusEnum: {
    readonly Enabled: "ENABLED";
    readonly Unset: "UNSET";
    readonly Locked: "LOCKED";
};
type ListUsersSecurityQuestionStatusEnum = typeof ListUsersSecurityQuestionStatusEnum[keyof typeof ListUsersSecurityQuestionStatusEnum];

/**
 * WalletsApi - axios parameter creator
 * @export
 */
declare const WalletsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generates a challenge to create a new user-controlled wallet or a batch of wallets. You must specify the blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWallet: (xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet: (id: string, xUserToken: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBalance: (xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts: (xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets: (xUserToken: string, address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet: (id: string, xUserToken: string, updateWalletRequest: UpdateWalletRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WalletsApi - functional programming interface
 * @export
 */
declare const WalletsApiFp: (configuration?: Configuration) => {
    /**
     * Generates a challenge to create a new user-controlled wallet or a batch of wallets. You must specify the blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWallet(xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEndUserWallet>>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(id: string, xUserToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponse>>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBalance(xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Balances>>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts(xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nfts>>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets(xUserToken: string, address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wallets>>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet(id: string, xUserToken: string, updateWalletRequest: UpdateWalletRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponse>>;
};
/**
 * WalletsApi - factory interface
 * @export
 */
declare const WalletsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generates a challenge to create a new user-controlled wallet or a batch of wallets. You must specify the blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserWallet(xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: any): AxiosPromise<CreateEndUserWallet>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(id: string, xUserToken: string, options?: any): AxiosPromise<WalletResponse>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBalance(xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Balances>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts(xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Nfts>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets(xUserToken: string, address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Wallets>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet(id: string, xUserToken: string, updateWalletRequest: UpdateWalletRequest, options?: any): AxiosPromise<WalletResponse>;
};
/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
declare class WalletsApi extends BaseAPI {
    /**
     * Generates a challenge to create a new user-controlled wallet or a batch of wallets. You must specify the blockchain and wallet name.
     * @summary Create wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {CreateEndUserWalletRequest} createEndUserWalletRequest walletResponse creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    createUserWallet(xUserToken: string, createEndUserWalletRequest: CreateEndUserWalletRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateEndUserWallet, any>>;
    /**
     * Retrieves info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Get a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    getWallet(id: string, xUserToken: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletResponse, any>>;
    /**
     * Fetches the digital asset balance for a single user-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWalletBalance(xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Balances, any>>;
    /**
     * Fetches the info for all NFTs stored in a single user-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWalletNfts(xUserToken: string, id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Nfts, any>>;
    /**
     * Retrieves a list of all user-controlled wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWallets(xUserToken: string, address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Wallets, any>>;
    /**
     * Updates info for a single user-controlled wallet using it\'s unique identifier.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} xUserToken Unique system generated JWT session token for specific user.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    updateWallet(id: string, xUserToken: string, updateWalletRequest: UpdateWalletRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletResponse, any>>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

interface ClientConfig {
    /**
     * ApiKey that will be used to authenticate the request
     */
    apiKey: string;
    /**
     * Version of the client. Will be added to the user agent.
     */
    version: string;
    /**
     * Customized user agent. Will be added to the user agent.
     */
    userAgent?: string;
}
declare class UserControlledWalletsClient {
    PINAuthentication: ReturnType<typeof PINAuthenticationApiFactory>;
    Signing: ReturnType<typeof SigningApiFactory>;
    SocialEmailAuthentication: ReturnType<typeof SocialEmailAuthenticationApiFactory>;
    TokenLookup: ReturnType<typeof TokenLookupApiFactory>;
    Transactions: ReturnType<typeof TransactionsApiFactory>;
    Users: ReturnType<typeof UsersApiFactory>;
    Wallets: ReturnType<typeof WalletsApiFactory>;
    constructor(baseUrl: string, config: ClientConfig, headers?: Record<string, string>);
}

export { type AbiParametersInner, type AccelerateTransactionForEndUserRequest, type AccelerateTransactionForEndUserResponse, AccountType, type BadRequestResponse, type Balance, type Balances, type BalancesData, type BaseScreeningDecision, Blockchain, type CancelTransactionForEndUserRequest, type CancelTransactionForEndUserResponse, type Challenge, type ChallengeResponse, type ChallengeResponseData, ChallengeStatusEnum, ChallengeTypeEnum, type Challenges, type ChallengesData, ContractExecutionBlockchain, type CreateContractExecutionTransactionForEndUserRequest, type CreateContractExecutionTransactionForEndUserResponse, type CreateEndUserWallet, type CreateEndUserWalletRequest, type CreateTransferTransactionForEndUserRequest, type CreateTransferTransactionForEndUserResponse, type CreateUserRequest, type CreateWalletUpgradeTransactionForEndUserRequest, type CreateWalletUpgradeTransactionForEndUserResponse, CustodyType, type DeviceTokenEmail, type DeviceTokenEmailData, type DeviceTokenEmailRequest, type DeviceTokenSocial, type DeviceTokenSocialData, type DeviceTokenSocialRequest, type EOAWallet, type EndUser, EndUserSecurityQuestionStatusEnum, EndUserStatus, type EstimateContractExecutionTransactionFeeRequest, type EstimateTransactionFee, type EstimateTransactionFeeData, type EstimateTransferTransactionFeeRequest, FeeLevel, type GetUserByIDResponse, type GetUserByIDResponseData, ListTransactionsOperationEnum, ListUserChallengesStatusEnum, ListUsersPinStatusEnum, ListUsersSecurityQuestionStatusEnum, type ModelError, NewScaCore, type Nft, type Nfts, type NftsData, type NotAuthorizedResponse, type NotFoundResponse, Operation, PINAuthenticationApi, PINAuthenticationApiAxiosParamCreator, PINAuthenticationApiFactory, PINAuthenticationApiFp, type Pin, type PinData, type PinSecurityDetails, PinStatus, type RefreshUserToken, type RefreshUserTokenData, type RefreshUserTokenRequest, type ResendOTPRequest, type ResentOTP, type ResentOTPData, RiskAction, RiskCategory, RiskScore, type RiskSignal, RiskSignalSourceEnum, RiskType, type SCAWallet, ScaCore, type SetPinAndInitWalletRequest, type SetPinRequest, type SignMessageRequest, type SignTransactionResponse, type SignTypedDataRequest, type SignUserTransactionRequest, type Signature, SigningApi, SigningApiAxiosParamCreator, SigningApiFactory, SigningApiFp, SocialEmailAuthenticationApi, SocialEmailAuthenticationApiAxiosParamCreator, SocialEmailAuthenticationApiFactory, SocialEmailAuthenticationApiFp, type Token, TokenBlockchain, TokenLookupApi, TokenLookupApiAxiosParamCreator, TokenLookupApiFactory, TokenLookupApiFp, type TokenResponse, type TokenResponseData, TokenStandard, type Transaction, type TransactionFee, type TransactionResponse, type TransactionResponseData, type TransactionScreeningDecision, TransactionState, TransactionType, type Transactions, TransactionsApi, TransactionsApiAxiosParamCreator, TransactionsApiFactory, TransactionsApiFp, type TransactionsData, type UpdateWalletRequest, UserControlledWalletsClient, type UserResponse, type UserTokenRequest, type UserTokenResponse, type UserTokenResponseData, type Users, UsersApi, UsersApiAxiosParamCreator, UsersApiFactory, UsersApiFp, type UsersData, type ValidateAddress, type ValidateAddressData, type ValidateAddressRequest, type Wallet, type WalletMetadata, type WalletResponse, type WalletResponseData, type WalletResponseDataWallet, WalletState, type Wallets, WalletsApi, WalletsApiAxiosParamCreator, WalletsApiFactory, WalletsApiFp, type WalletsData };
