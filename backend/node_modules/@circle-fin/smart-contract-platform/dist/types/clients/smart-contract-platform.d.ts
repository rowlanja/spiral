import * as axios from 'axios';
import { AxiosRequestConfig, AxiosInstance, AxiosPromise } from 'axios';

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}
declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface RequestArgs
 */
interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}
/**
 *
 * @export
 * @class BaseAPI
 */
declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AbiParametersInner
 */
interface AbiParametersInner {
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The blockchain network that the resource is to be created on or is currently on.  Required along with `sourceAddress` if you don\'t provide `walletId`. The `blockchain` and `walletId` fields are mutually exclusive.
 * @export
 * @enum {string}
 */
declare const Blockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type Blockchain = typeof Blockchain[keyof typeof Blockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The input type for the contract.
 * @export
 * @enum {string}
 */
declare const ContractInputType: {
    readonly Import: "IMPORT";
    readonly Bytecode: "BYTECODE";
    readonly Template: "TEMPLATE";
    readonly AutoImport: "AUTO_IMPORT";
};
type ContractInputType = typeof ContractInputType[keyof typeof ContractInputType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The status of the contract.
 * @export
 * @enum {string}
 */
declare const ContractStatus: {
    readonly Pending: "PENDING";
    readonly Failed: "FAILED";
    readonly Complete: "COMPLETE";
};
type ContractStatus = typeof ContractStatus[keyof typeof ContractStatus];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ParamType
 */
interface ParamType {
    /**
     *
     * @type {Array<any>}
     * @memberof ParamType
     */
    'components'?: Array<any>;
    /**
     *
     * @type {boolean}
     * @memberof ParamType
     */
    'indexed'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ParamType
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ParamType
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof ParamType
     */
    'flattenedType'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Event
 */
interface Event {
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'type': string;
    /**
     *
     * @type {boolean}
     * @memberof Event
     */
    'anonymous'?: boolean;
    /**
     *
     * @type {Array<ParamType>}
     * @memberof Event
     */
    'inputs'?: Array<ParamType>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Function
 */
interface Function {
    /**
     *
     * @type {string}
     * @memberof Function
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Function
     */
    'stateMutability'?: string;
    /**
     *
     * @type {string}
     * @memberof Function
     */
    'type': string;
    /**
     *
     * @type {Array<ParamType>}
     * @memberof Function
     */
    'inputs'?: Array<ParamType>;
    /**
     *
     * @type {Array<ParamType>}
     * @memberof Function
     */
    'outputs'?: Array<ParamType>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Source code of a contract from Etherscan.
 * @export
 * @interface SolFile
 */
interface SolFile {
    /**
     * Name of the file.
     * @type {string}
     * @memberof SolFile
     */
    'fileName'?: string;
    /**
     * Content of the file. If the contract\'s source code was flattened before verification, this may be the entire source code.
     * @type {string}
     * @memberof SolFile
     */
    'fileContent': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The verification status of the contract.
 * @export
 * @enum {string}
 */
declare const VerificationStatus: {
    readonly Unverified: "UNVERIFIED";
    readonly Verified: "VERIFIED";
};
type VerificationStatus = typeof VerificationStatus[keyof typeof VerificationStatus];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Contract
 */
interface Contract {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Contract
     */
    'id': string;
    /**
     * The `id` of the Programmable Wallet that deployed this contract.
     * @type {string}
     * @memberof Contract
     */
    'deployerWalletID'?: string;
    /**
     * The id of the deployment transaction for this contract.
     * @type {string}
     * @memberof Contract
     */
    'deploymentTransactionId'?: string;
    /**
     * Blockchain generated identifier of the transaction.
     * @type {string}
     * @memberof Contract
     */
    'txHash'?: string;
    /**
     * The contract\'s ABI in a JSON stringified format.
     * @type {string}
     * @memberof Contract
     */
    'abiJson'?: string;
    /**
     * The archive state of the contract. If true, the contract will not be visible in your dashboard.
     * @type {boolean}
     * @memberof Contract
     */
    'archived': boolean;
    /**
     *
     * @type {Blockchain}
     * @memberof Contract
     */
    'blockchain': Blockchain;
    /**
     * Bytecode of the contract being deployed.
     * @type {string}
     * @memberof Contract
     */
    'bytecode'?: string;
    /**
     * The on-chain address of this contract.
     * @type {string}
     * @memberof Contract
     */
    'contractAddress'?: string;
    /**
     *
     * @type {ContractInputType}
     * @memberof Contract
     */
    'contractInputType': ContractInputType;
    /**
     * The address that created this contract, if deployed.
     * @type {string}
     * @memberof Contract
     */
    'deployerAddress'?: string;
    /**
     *
     * @type {string}
     * @memberof Contract
     */
    'deployerUserID'?: string;
    /**
     *
     * @type {string}
     * @memberof Contract
     */
    'deploymentErrorReason'?: string;
    /**
     *
     * @type {string}
     * @memberof Contract
     */
    'deploymentErrorDetails'?: string;
    /**
     * The name for a contract. Must be alphanumeric [a-zA-Z0-9].
     * @type {string}
     * @memberof Contract
     */
    'name': string;
    /**
     * The description for a contract.
     * @type {string}
     * @memberof Contract
     */
    'description'?: string;
    /**
     *
     * @type {ContractStatus}
     * @memberof Contract
     */
    'status': ContractStatus;
    /**
     *
     * @type {VerificationStatus}
     * @memberof Contract
     */
    'verificationStatus': VerificationStatus;
    /**
     * The ipfs metadata link of the contract.
     * @type {string}
     * @memberof Contract
     */
    'metadataLink'?: string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Contract
     */
    'updateDate': string;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Contract
     */
    'createDate': string;
    /**
     *
     * @type {Array<SolFile>}
     * @memberof Contract
     */
    'sourceCode': Array<SolFile>;
    /**
     * Functions supported by this contract. Parsed from abi_json.
     * @type {Array<Function>}
     * @memberof Contract
     */
    'functions': Array<Function>;
    /**
     * Events this contract can emit. Parsed from abi_json.
     * @type {Array<Event>}
     * @memberof Contract
     */
    'events': Array<Event>;
    /**
     * Object of the implementation contract.
     * @type {object}
     * @memberof Contract
     */
    'implementationContract'?: object;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ContractDeploymentData
 */
interface ContractDeploymentData {
    /**
     * Unique identifier of the created smart contract.
     * @type {string}
     * @memberof ContractDeploymentData
     */
    'contractId': string;
    /**
     * Unique identifier of the deployment transaction.
     * @type {string}
     * @memberof ContractDeploymentData
     */
    'transactionId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractDeployment
 */
interface ContractDeployment {
    /**
     *
     * @type {ContractDeploymentData}
     * @memberof ContractDeployment
     */
    'data': ContractDeploymentData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractDeploymentEstimateFeeRequest
 */
interface ContractDeploymentEstimateFeeRequest {
    /**
     * The contract\'s ABI in a JSON stringified format.
     * @type {string}
     * @memberof ContractDeploymentEstimateFeeRequest
     */
    'abiJson'?: string;
    /**
     *
     * @type {Blockchain}
     * @memberof ContractDeploymentEstimateFeeRequest
     */
    'blockchain'?: Blockchain;
    /**
     * Bytecode of the contract being deployed.
     * @type {string}
     * @memberof ContractDeploymentEstimateFeeRequest
     */
    'bytecode': string;
    /**
     * Signature of the constructor if the contract has one. constructor() by default.
     * @type {string}
     * @memberof ContractDeploymentEstimateFeeRequest
     */
    'constructorSignature'?: string;
    /**
     * A list of arguments to pass to the contract\'s constructor function. Must be an empty array if there are no constructor parameters.
     * @type {Array<any>}
     * @memberof ContractDeploymentEstimateFeeRequest
     */
    'constructorParameters'?: Array<any>;
    /**
     * Source address of the transaction. Required along with `blockchain` if `walletId` is not provided.  The `sourceAddress` and `walletId` fields are mutually exclusive.
     * @type {string}
     * @memberof ContractDeploymentEstimateFeeRequest
     */
    'sourceAddress'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof ContractDeploymentEstimateFeeRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractDeploymentEstimateRequest
 */
interface ContractDeploymentEstimateRequest {
    /**
     *
     * @type {Blockchain}
     * @memberof ContractDeploymentEstimateRequest
     */
    'blockchain': Blockchain;
    /**
     * Source address of the transaction. Required along with `blockchain` if `walletId` is not provided.  The `sourceAddress` and `walletId` fields are mutually exclusive.
     * @type {string}
     * @memberof ContractDeploymentEstimateRequest
     */
    'sourceAddress'?: string;
    /**
     * JSON object that contains the template deployment parameters used to initialize the contract(s) on-chain.
     * @type {{ [key: string]: string; }}
     * @memberof ContractDeploymentEstimateRequest
     */
    'templateParameters'?: {
        [key: string]: string;
    };
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof ContractDeploymentEstimateRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A dynamic blockchain fee level setting (`LOW`, `MEDIUM`, or `HIGH`) that will be used to pay gas for the transaction. Calculated based on network traffic, supply of validators, and demand for transaction verification. Cannot be used with `gasPrice`, `priorityFee`, or `maxFee`. Estimates for each fee level can be obtained through the `POST /transactions/transfer/estimateFee` API.
 * @export
 * @enum {string}
 */
declare const FeeLevel: {
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
};
type FeeLevel = typeof FeeLevel[keyof typeof FeeLevel];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractDeploymentRequest
 */
interface ContractDeploymentRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'idempotencyKey': string;
    /**
     * The name for a contract. Must be alphanumeric [a-zA-Z0-9].
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'name': string;
    /**
     * The description for a contract.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'description'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'walletId': string;
    /**
     * The contract\'s ABI in a JSON stringified format.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'abiJson': string;
    /**
     * Bytecode of the contract being deployed.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'bytecode': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'entitySecretCiphertext': string;
    /**
     *
     * @type {Blockchain}
     * @memberof ContractDeploymentRequest
     */
    'blockchain': Blockchain;
    /**
     * A list of arguments to pass to the contract\'s constructor function. Must be an empty array if there are no constructor parameters.
     * @type {Array<any>}
     * @memberof ContractDeploymentRequest
     */
    'constructorParameters'?: Array<any>;
    /**
     *
     * @type {FeeLevel}
     * @memberof ContractDeploymentRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof ContractDeploymentRequest
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractResponseData
 */
interface ContractResponseData {
    /**
     *
     * @type {Contract}
     * @memberof ContractResponseData
     */
    'contract': Contract;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractResponse
 */
interface ContractResponse {
    /**
     *
     * @type {ContractResponseData}
     * @memberof ContractResponse
     */
    'data': ContractResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ContractsData
 */
interface ContractsData {
    /**
     * Contracts are all the contracts that match criteria.
     * @type {Array<Contract>}
     * @memberof ContractsData
     */
    'contracts': Array<Contract>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Contracts
 */
interface Contracts {
    /**
     *
     * @type {ContractsData}
     * @memberof Contracts
     */
    'data': ContractsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateEventMonitorRequest
 */
interface CreateEventMonitorRequest {
    /**
     *
     * @type {Blockchain}
     * @memberof CreateEventMonitorRequest
     */
    'blockchain': Blockchain;
    /**
     * The on-chain address of this contract.
     * @type {string}
     * @memberof CreateEventMonitorRequest
     */
    'contractAddress': string;
    /**
     * The specific event to which you want to subscribeven. Please ensure no spaces are included.
     * @type {string}
     * @memberof CreateEventMonitorRequest
     */
    'eventSignature': string;
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateEventMonitorRequest
     */
    'idempotencyKey': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventLog
 */
interface EventLog {
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'blockHash': string;
    /**
     *
     * @type {number}
     * @memberof EventLog
     */
    'blockHeight': number;
    /**
     *
     * @type {Blockchain}
     * @memberof EventLog
     */
    'blockchain': Blockchain;
    /**
     * The on-chain address of this contract.
     * @type {string}
     * @memberof EventLog
     */
    'contractAddress': string;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'data': string;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'eventSignature': string;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'eventSignatureHash': string;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'logIndex': string;
    /**
     *
     * @type {Array<string>}
     * @memberof EventLog
     */
    'topics': Array<string>;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'txHash': string;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'userOpHash': string;
    /**
     *
     * @type {string}
     * @memberof EventLog
     */
    'firstConfirmDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventLogsData
 */
interface EventLogsData {
    /**
     * A list of event logs generated from the specified contract events.
     * @type {Array<EventLog>}
     * @memberof EventLogsData
     */
    'eventLogs': Array<EventLog>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventLogs
 */
interface EventLogs {
    /**
     *
     * @type {EventLogsData}
     * @memberof EventLogs
     */
    'data': EventLogsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventMonitor
 */
interface EventMonitor {
    /**
     *
     * @type {string}
     * @memberof EventMonitor
     */
    'id': string;
    /**
     *
     * @type {Blockchain}
     * @memberof EventMonitor
     */
    'blockchain': Blockchain;
    /**
     * The on-chain address of this contract.
     * @type {string}
     * @memberof EventMonitor
     */
    'contractAddress': string;
    /**
     *
     * @type {string}
     * @memberof EventMonitor
     */
    'eventSignature': string;
    /**
     *
     * @type {string}
     * @memberof EventMonitor
     */
    'eventSignatureHash': string;
    /**
     *
     * @type {boolean}
     * @memberof EventMonitor
     */
    'isEnabled': boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventMonitorResponseData
 */
interface EventMonitorResponseData {
    /**
     *
     * @type {EventMonitor}
     * @memberof EventMonitorResponseData
     */
    'eventMonitor': EventMonitor;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventMonitorResponse
 */
interface EventMonitorResponse {
    /**
     *
     * @type {EventMonitorResponseData}
     * @memberof EventMonitorResponse
     */
    'data': EventMonitorResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventMonitorsData
 */
interface EventMonitorsData {
    /**
     * Event monitors that match criteria.
     * @type {Array<EventMonitor>}
     * @memberof EventMonitorsData
     */
    'eventMonitors': Array<EventMonitor>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EventMonitors
 */
interface EventMonitors {
    /**
     *
     * @type {EventMonitorsData}
     * @memberof EventMonitors
     */
    'data': EventMonitorsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TransactionFee
 */
interface TransactionFee {
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof TransactionFee
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'priorityFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the estimated base fee represents the minimum fee required for a transaction to be included in a block on the blockchain.  It is measured in gwei and compensates for the computational resources validators consume to process the transaction.  The base fee is supplemented by a separate \"tip\" called the priority fee, which acts as an extra incentive for validators to prioritize the transaction.  The priority fee is added to the base fee to calculate the final transaction fee.
     * @type {string}
     * @memberof TransactionFee
     */
    'baseFee'?: string;
    /**
     * The estimated network fee is the maximum amount of cryptocurrency (such as ETH, ARB, or SOL) that you will pay for your transaction. This fee depends on the parameters you set, including Gas Limit, Priority Fee, and Max Fee. It compensates for the computational resources that validators consume to process the transaction. It is measured in native token such as ETH, SOL. For blockchains with L1 data fees such as OP/BASE, the network fee is a combination of the Execution Gas Fee and the L1 Data Fee. Each blockchain might use different formula for network fee. Refer to each specific blockchain\'s documentation to understand how `networkFee` is calculated.
     * @type {string}
     * @memberof TransactionFee
     */
    'networkFee'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface FeeEstimationData
 */
interface FeeEstimationData {
    /**
     *
     * @type {TransactionFee}
     * @memberof FeeEstimationData
     */
    'high'?: TransactionFee;
    /**
     *
     * @type {TransactionFee}
     * @memberof FeeEstimationData
     */
    'low'?: TransactionFee;
    /**
     *
     * @type {TransactionFee}
     * @memberof FeeEstimationData
     */
    'medium'?: TransactionFee;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface FeeEstimation
 */
interface FeeEstimation {
    /**
     *
     * @type {FeeEstimationData}
     * @memberof FeeEstimation
     */
    'data': FeeEstimationData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ImportContractRequest
 */
interface ImportContractRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof ImportContractRequest
     */
    'idempotencyKey': string;
    /**
     * The name for a contract. Must be alphanumeric [a-zA-Z0-9].
     * @type {string}
     * @memberof ImportContractRequest
     */
    'name': string;
    /**
     * The description for a contract.
     * @type {string}
     * @memberof ImportContractRequest
     */
    'description'?: string;
    /**
     * The on-chain address of this contract.
     * @type {string}
     * @memberof ImportContractRequest
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof ImportContractRequest
     */
    'blockchain': Blockchain;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ModelError
 */
interface ModelError {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface PatchContractRequest
 */
interface PatchContractRequest {
    /**
     * The name for a contract. Must be alphanumeric [a-zA-Z0-9].
     * @type {string}
     * @memberof PatchContractRequest
     */
    'name'?: string;
    /**
     * The description for a contract.
     * @type {string}
     * @memberof PatchContractRequest
     */
    'description'?: string;
    /**
     * The archive state of the contract. If true, the contract will not be visible in your dashboard.
     * @type {boolean}
     * @memberof PatchContractRequest
     */
    'archived'?: boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ReadContractStateData
 */
interface ReadContractStateData {
    /**
     * Output for the ABI interaction.
     * @type {Array<any>}
     * @memberof ReadContractStateData
     */
    'outputValues': Array<any>;
    /**
     * OutputData is output in hex format.
     * @type {string}
     * @memberof ReadContractStateData
     */
    'outputData': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ReadContractState
 */
interface ReadContractState {
    /**
     *
     * @type {ReadContractStateData}
     * @memberof ReadContractState
     */
    'data': ReadContractStateData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ReadContractStateRequest
 */
interface ReadContractStateRequest {
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof ReadContractStateRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<AbiParametersInner>}
     * @memberof ReadContractStateRequest
     */
    'abiParameters'?: Array<AbiParametersInner>;
    /**
     * The contract\'s ABI in a JSON stringified format.
     * @type {string}
     * @memberof ReadContractStateRequest
     */
    'abiJson'?: string;
    /**
     * Address of the contract to be queried.
     * @type {string}
     * @memberof ReadContractStateRequest
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof ReadContractStateRequest
     */
    'blockchain': Blockchain;
    /**
     * CallData is input data that encodes method and parameters.
     * @type {string}
     * @memberof ReadContractStateRequest
     */
    'callData'?: string;
    /**
     * FromAddress is the address that will populate msg.sender in the contract call.
     * @type {string}
     * @memberof ReadContractStateRequest
     */
    'fromAddress'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TemplateContractDeploymentData
 */
interface TemplateContractDeploymentData {
    /**
     * Unique identifiers of the created smart contracts.
     * @type {Array<string>}
     * @memberof TemplateContractDeploymentData
     */
    'contractIds': Array<string>;
    /**
     * Unique identifier of the pending deployment transaction. transaction.
     * @type {string}
     * @memberof TemplateContractDeploymentData
     */
    'transactionId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TemplateContractDeployment
 */
interface TemplateContractDeployment {
    /**
     *
     * @type {TemplateContractDeploymentData}
     * @memberof TemplateContractDeployment
     */
    'data': TemplateContractDeploymentData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TemplateContractDeploymentRequest
 */
interface TemplateContractDeploymentRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {Blockchain}
     * @memberof TemplateContractDeploymentRequest
     */
    'blockchain': Blockchain;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'walletId': string;
    /**
     * Name of the contract in your Circle console.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'name': string;
    /**
     * Description of the contract.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'description'?: string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'entitySecretCiphertext': string;
    /**
     * JSON object that contains the template deployment parameters used to initialize the contract(s) on-chain.
     * @type {{ [key: string]: string; }}
     * @memberof TemplateContractDeploymentRequest
     */
    'templateParameters'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {FeeLevel}
     * @memberof TemplateContractDeploymentRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'priorityFee'?: string;
    /**
     * RefID is a custom label field.
     * @type {string}
     * @memberof TemplateContractDeploymentRequest
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UpdateEventMonitorRequest
 */
interface UpdateEventMonitorRequest {
    /**
     * Indicates whether the event monitor should be active (true) or inactive (false).
     * @type {boolean}
     * @memberof UpdateEventMonitorRequest
     */
    'isEnabled': boolean;
}

/**
 * DeployImportApi - axios parameter creator
 * @export
 */
declare const DeployImportApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
     * @summary Deploy a contract
     * @param {ContractDeploymentRequest} contractDeploymentRequest Deploy contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContract: (contractDeploymentRequest: ContractDeploymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
     * @summary Estimate a contract deployment
     * @param {ContractDeploymentEstimateFeeRequest} contractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateContractDeploy: (contractDeploymentEstimateFeeRequest: ContractDeploymentEstimateFeeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
     * @summary Import a contract
     * @param {ImportContractRequest} importContractRequest Import contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importContract: (importContractRequest: ImportContractRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeployImportApi - functional programming interface
 * @export
 */
declare const DeployImportApiFp: (configuration?: Configuration) => {
    /**
     * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
     * @summary Deploy a contract
     * @param {ContractDeploymentRequest} contractDeploymentRequest Deploy contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContract(contractDeploymentRequest: ContractDeploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractDeployment>>;
    /**
     * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
     * @summary Estimate a contract deployment
     * @param {ContractDeploymentEstimateFeeRequest} contractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateContractDeploy(contractDeploymentEstimateFeeRequest: ContractDeploymentEstimateFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeeEstimation>>;
    /**
     * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
     * @summary Import a contract
     * @param {ImportContractRequest} importContractRequest Import contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importContract(importContractRequest: ImportContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractResponse>>;
};
/**
 * DeployImportApi - factory interface
 * @export
 */
declare const DeployImportApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
     * @summary Deploy a contract
     * @param {ContractDeploymentRequest} contractDeploymentRequest Deploy contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContract(contractDeploymentRequest: ContractDeploymentRequest, options?: any): AxiosPromise<ContractDeployment>;
    /**
     * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
     * @summary Estimate a contract deployment
     * @param {ContractDeploymentEstimateFeeRequest} contractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateContractDeploy(contractDeploymentEstimateFeeRequest: ContractDeploymentEstimateFeeRequest, options?: any): AxiosPromise<FeeEstimation>;
    /**
     * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
     * @summary Import a contract
     * @param {ImportContractRequest} importContractRequest Import contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importContract(importContractRequest: ImportContractRequest, options?: any): AxiosPromise<ContractResponse>;
};
/**
 * DeployImportApi - object-oriented interface
 * @export
 * @class DeployImportApi
 * @extends {BaseAPI}
 */
declare class DeployImportApi extends BaseAPI {
    /**
     * Deploy a smart contract on a specified blockchain using the contract\'s ABI and bytecode. The deployment will originate from one of your Circle Programmable Wallets.
     * @summary Deploy a contract
     * @param {ContractDeploymentRequest} contractDeploymentRequest Deploy contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployImportApi
     */
    deployContract(contractDeploymentRequest: ContractDeploymentRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ContractDeployment, any>>;
    /**
     * Estimate the network fee for deploying a smart contract on a specified blockchain, given the contract bytecode.
     * @summary Estimate a contract deployment
     * @param {ContractDeploymentEstimateFeeRequest} contractDeploymentEstimateFeeRequest Estimate a transaction fee for deploying a smart contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployImportApi
     */
    estimateContractDeploy(contractDeploymentEstimateFeeRequest: ContractDeploymentEstimateFeeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<FeeEstimation, any>>;
    /**
     * Add an existing smart contract to your library of contracts. It also can be done in the Web3 Services Console.
     * @summary Import a contract
     * @param {ImportContractRequest} importContractRequest Import contract request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployImportApi
     */
    importContract(importContractRequest: ImportContractRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ContractResponse, any>>;
}

/**
 * EventMonitorsApi - axios parameter creator
 * @export
 */
declare const EventMonitorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new event monitor based on the provided blockchain, contract address, and event signature.
     * @summary Create Event Monitor
     * @param {CreateEventMonitorRequest} [createEventMonitorRequest] Create Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventMonitor: (createEventMonitorRequest?: CreateEventMonitorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing event monitor given its ID.
     * @summary Delete Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventMonitor: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of event monitors, optionally filtered by blockchain, contract address, and event signature.
     * @summary Get Event Monitors
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [eventSignature] Filter monitors by event signature.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventMonitors: (contractAddress?: string, blockchain?: Blockchain, eventSignature?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch all event logs, optionally filtered by blockchain and contract address.
     * @summary Get Event Logs
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEventLogs: (contractAddress?: string, blockchain?: Blockchain, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing event monitor given its ID.
     * @summary Update an Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {UpdateEventMonitorRequest} [updateEventMonitorRequest] Update Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEventMonitor: (id: string, updateEventMonitorRequest?: UpdateEventMonitorRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EventMonitorsApi - functional programming interface
 * @export
 */
declare const EventMonitorsApiFp: (configuration?: Configuration) => {
    /**
     * Create a new event monitor based on the provided blockchain, contract address, and event signature.
     * @summary Create Event Monitor
     * @param {CreateEventMonitorRequest} [createEventMonitorRequest] Create Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventMonitor(createEventMonitorRequest?: CreateEventMonitorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventMonitorResponse>>;
    /**
     * Delete an existing event monitor given its ID.
     * @summary Delete Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventMonitor(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Fetch a list of event monitors, optionally filtered by blockchain, contract address, and event signature.
     * @summary Get Event Monitors
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [eventSignature] Filter monitors by event signature.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventMonitors(contractAddress?: string, blockchain?: Blockchain, eventSignature?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventMonitors>>;
    /**
     * Fetch all event logs, optionally filtered by blockchain and contract address.
     * @summary Get Event Logs
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEventLogs(contractAddress?: string, blockchain?: Blockchain, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventLogs>>;
    /**
     * Update an existing event monitor given its ID.
     * @summary Update an Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {UpdateEventMonitorRequest} [updateEventMonitorRequest] Update Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEventMonitor(id: string, updateEventMonitorRequest?: UpdateEventMonitorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventMonitorResponse>>;
};
/**
 * EventMonitorsApi - factory interface
 * @export
 */
declare const EventMonitorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new event monitor based on the provided blockchain, contract address, and event signature.
     * @summary Create Event Monitor
     * @param {CreateEventMonitorRequest} [createEventMonitorRequest] Create Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEventMonitor(createEventMonitorRequest?: CreateEventMonitorRequest, options?: any): AxiosPromise<EventMonitorResponse>;
    /**
     * Delete an existing event monitor given its ID.
     * @summary Delete Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEventMonitor(id: string, options?: any): AxiosPromise<void>;
    /**
     * Fetch a list of event monitors, optionally filtered by blockchain, contract address, and event signature.
     * @summary Get Event Monitors
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [eventSignature] Filter monitors by event signature.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEventMonitors(contractAddress?: string, blockchain?: Blockchain, eventSignature?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<EventMonitors>;
    /**
     * Fetch all event logs, optionally filtered by blockchain and contract address.
     * @summary Get Event Logs
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEventLogs(contractAddress?: string, blockchain?: Blockchain, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<EventLogs>;
    /**
     * Update an existing event monitor given its ID.
     * @summary Update an Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {UpdateEventMonitorRequest} [updateEventMonitorRequest] Update Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEventMonitor(id: string, updateEventMonitorRequest?: UpdateEventMonitorRequest, options?: any): AxiosPromise<EventMonitorResponse>;
};
/**
 * EventMonitorsApi - object-oriented interface
 * @export
 * @class EventMonitorsApi
 * @extends {BaseAPI}
 */
declare class EventMonitorsApi extends BaseAPI {
    /**
     * Create a new event monitor based on the provided blockchain, contract address, and event signature.
     * @summary Create Event Monitor
     * @param {CreateEventMonitorRequest} [createEventMonitorRequest] Create Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventMonitorsApi
     */
    createEventMonitor(createEventMonitorRequest?: CreateEventMonitorRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EventMonitorResponse, any>>;
    /**
     * Delete an existing event monitor given its ID.
     * @summary Delete Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventMonitorsApi
     */
    deleteEventMonitor(id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<void, any>>;
    /**
     * Fetch a list of event monitors, optionally filtered by blockchain, contract address, and event signature.
     * @summary Get Event Monitors
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [eventSignature] Filter monitors by event signature.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventMonitorsApi
     */
    getEventMonitors(contractAddress?: string, blockchain?: Blockchain, eventSignature?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EventMonitors, any>>;
    /**
     * Fetch all event logs, optionally filtered by blockchain and contract address.
     * @summary Get Event Logs
     * @param {string} [contractAddress] Filter contracts by address.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventMonitorsApi
     */
    listEventLogs(contractAddress?: string, blockchain?: Blockchain, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EventLogs, any>>;
    /**
     * Update an existing event monitor given its ID.
     * @summary Update an Event Monitor
     * @param {string} id Event Monitor ID.
     * @param {UpdateEventMonitorRequest} [updateEventMonitorRequest] Update Event Monitor Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventMonitorsApi
     */
    updateEventMonitor(id: string, updateEventMonitorRequest?: UpdateEventMonitorRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EventMonitorResponse, any>>;
}

/**
 * InteractApi - axios parameter creator
 * @export
 */
declare const InteractApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Query the state of a contract by providing the address and blockchain.
     * @summary Execute a query function on a contract
     * @param {ReadContractStateRequest} readContractStateRequest Read contract state by executing a read ABI function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryContract: (readContractStateRequest: ReadContractStateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InteractApi - functional programming interface
 * @export
 */
declare const InteractApiFp: (configuration?: Configuration) => {
    /**
     * Query the state of a contract by providing the address and blockchain.
     * @summary Execute a query function on a contract
     * @param {ReadContractStateRequest} readContractStateRequest Read contract state by executing a read ABI function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryContract(readContractStateRequest: ReadContractStateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadContractState>>;
};
/**
 * InteractApi - factory interface
 * @export
 */
declare const InteractApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Query the state of a contract by providing the address and blockchain.
     * @summary Execute a query function on a contract
     * @param {ReadContractStateRequest} readContractStateRequest Read contract state by executing a read ABI function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryContract(readContractStateRequest: ReadContractStateRequest, options?: any): AxiosPromise<ReadContractState>;
};
/**
 * InteractApi - object-oriented interface
 * @export
 * @class InteractApi
 * @extends {BaseAPI}
 */
declare class InteractApi extends BaseAPI {
    /**
     * Query the state of a contract by providing the address and blockchain.
     * @summary Execute a query function on a contract
     * @param {ReadContractStateRequest} readContractStateRequest Read contract state by executing a read ABI function.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InteractApi
     */
    queryContract(readContractStateRequest: ReadContractStateRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ReadContractState, any>>;
}

/**
 * TemplatesApi - axios parameter creator
 * @export
 */
declare const TemplatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deploy a smart contract using a template.
     * @summary Deploy a contract from a template
     * @param {string} id The universally unique identifier of the resource.
     * @param {TemplateContractDeploymentRequest} templateContractDeploymentRequest Deploy contract by template request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractTemplate: (id: string, templateContractDeploymentRequest: TemplateContractDeploymentRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Estimate the fee required to deploy contract by template.
     * @summary Estimate fee for a contract template deployment
     * @param {string} id The universally unique identifier of the resource.
     * @param {ContractDeploymentEstimateRequest} contractDeploymentEstimateRequest Request object for estimating the transaction fees for deploying a contract from a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateContractTemplateDeploy: (id: string, contractDeploymentEstimateRequest: ContractDeploymentEstimateRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TemplatesApi - functional programming interface
 * @export
 */
declare const TemplatesApiFp: (configuration?: Configuration) => {
    /**
     * Deploy a smart contract using a template.
     * @summary Deploy a contract from a template
     * @param {string} id The universally unique identifier of the resource.
     * @param {TemplateContractDeploymentRequest} templateContractDeploymentRequest Deploy contract by template request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractTemplate(id: string, templateContractDeploymentRequest: TemplateContractDeploymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateContractDeployment>>;
    /**
     * Estimate the fee required to deploy contract by template.
     * @summary Estimate fee for a contract template deployment
     * @param {string} id The universally unique identifier of the resource.
     * @param {ContractDeploymentEstimateRequest} contractDeploymentEstimateRequest Request object for estimating the transaction fees for deploying a contract from a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateContractTemplateDeploy(id: string, contractDeploymentEstimateRequest: ContractDeploymentEstimateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeeEstimation>>;
};
/**
 * TemplatesApi - factory interface
 * @export
 */
declare const TemplatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deploy a smart contract using a template.
     * @summary Deploy a contract from a template
     * @param {string} id The universally unique identifier of the resource.
     * @param {TemplateContractDeploymentRequest} templateContractDeploymentRequest Deploy contract by template request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractTemplate(id: string, templateContractDeploymentRequest: TemplateContractDeploymentRequest, options?: any): AxiosPromise<TemplateContractDeployment>;
    /**
     * Estimate the fee required to deploy contract by template.
     * @summary Estimate fee for a contract template deployment
     * @param {string} id The universally unique identifier of the resource.
     * @param {ContractDeploymentEstimateRequest} contractDeploymentEstimateRequest Request object for estimating the transaction fees for deploying a contract from a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    estimateContractTemplateDeploy(id: string, contractDeploymentEstimateRequest: ContractDeploymentEstimateRequest, options?: any): AxiosPromise<FeeEstimation>;
};
/**
 * TemplatesApi - object-oriented interface
 * @export
 * @class TemplatesApi
 * @extends {BaseAPI}
 */
declare class TemplatesApi extends BaseAPI {
    /**
     * Deploy a smart contract using a template.
     * @summary Deploy a contract from a template
     * @param {string} id The universally unique identifier of the resource.
     * @param {TemplateContractDeploymentRequest} templateContractDeploymentRequest Deploy contract by template request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    deployContractTemplate(id: string, templateContractDeploymentRequest: TemplateContractDeploymentRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<TemplateContractDeployment, any>>;
    /**
     * Estimate the fee required to deploy contract by template.
     * @summary Estimate fee for a contract template deployment
     * @param {string} id The universally unique identifier of the resource.
     * @param {ContractDeploymentEstimateRequest} contractDeploymentEstimateRequest Request object for estimating the transaction fees for deploying a contract from a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApi
     */
    estimateContractTemplateDeploy(id: string, contractDeploymentEstimateRequest: ContractDeploymentEstimateRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<FeeEstimation, any>>;
}

/**
 * ViewUpdateApi - axios parameter creator
 * @export
 */
declare const ViewUpdateApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a single contract that you\'ve imported or deployed. Retrieved using the contracts ID as opposed to the on-chain address.
     * @summary Get a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContract: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of contracts that you\'ve imported and/or deployed.
     * @summary List contracts
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ContractInputType} [contractInputType] Filter contracts by input type.
     * @param {string} [deployerAddress] Filter contracts by deployer address.
     * @param {string} [name] Filter contracts by name.
     * @param {ContractStatus} [status] Filter contracts by status.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContracts: (blockchain?: Blockchain, contractInputType?: ContractInputType, deployerAddress?: string, name?: string, status?: ContractStatus, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the off-chain properties, such as description, of a contract that you\'ve imported or deployed. Updated using the contracts ID as opposed to the on-chain address.
     * @summary Update a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {PatchContractRequest} patchContractRequest Update contract properties request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContract: (id: string, patchContractRequest: PatchContractRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ViewUpdateApi - functional programming interface
 * @export
 */
declare const ViewUpdateApiFp: (configuration?: Configuration) => {
    /**
     * Get a single contract that you\'ve imported or deployed. Retrieved using the contracts ID as opposed to the on-chain address.
     * @summary Get a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContract(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractResponse>>;
    /**
     * Fetch a list of contracts that you\'ve imported and/or deployed.
     * @summary List contracts
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ContractInputType} [contractInputType] Filter contracts by input type.
     * @param {string} [deployerAddress] Filter contracts by deployer address.
     * @param {string} [name] Filter contracts by name.
     * @param {ContractStatus} [status] Filter contracts by status.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContracts(blockchain?: Blockchain, contractInputType?: ContractInputType, deployerAddress?: string, name?: string, status?: ContractStatus, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contracts>>;
    /**
     * Update the off-chain properties, such as description, of a contract that you\'ve imported or deployed. Updated using the contracts ID as opposed to the on-chain address.
     * @summary Update a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {PatchContractRequest} patchContractRequest Update contract properties request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContract(id: string, patchContractRequest: PatchContractRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractResponse>>;
};
/**
 * ViewUpdateApi - factory interface
 * @export
 */
declare const ViewUpdateApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a single contract that you\'ve imported or deployed. Retrieved using the contracts ID as opposed to the on-chain address.
     * @summary Get a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContract(id: string, options?: any): AxiosPromise<ContractResponse>;
    /**
     * Fetch a list of contracts that you\'ve imported and/or deployed.
     * @summary List contracts
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ContractInputType} [contractInputType] Filter contracts by input type.
     * @param {string} [deployerAddress] Filter contracts by deployer address.
     * @param {string} [name] Filter contracts by name.
     * @param {ContractStatus} [status] Filter contracts by status.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listContracts(blockchain?: Blockchain, contractInputType?: ContractInputType, deployerAddress?: string, name?: string, status?: ContractStatus, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Contracts>;
    /**
     * Update the off-chain properties, such as description, of a contract that you\'ve imported or deployed. Updated using the contracts ID as opposed to the on-chain address.
     * @summary Update a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {PatchContractRequest} patchContractRequest Update contract properties request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateContract(id: string, patchContractRequest: PatchContractRequest, options?: any): AxiosPromise<ContractResponse>;
};
/**
 * ViewUpdateApi - object-oriented interface
 * @export
 * @class ViewUpdateApi
 * @extends {BaseAPI}
 */
declare class ViewUpdateApi extends BaseAPI {
    /**
     * Get a single contract that you\'ve imported or deployed. Retrieved using the contracts ID as opposed to the on-chain address.
     * @summary Get a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewUpdateApi
     */
    getContract(id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ContractResponse, any>>;
    /**
     * Fetch a list of contracts that you\'ve imported and/or deployed.
     * @summary List contracts
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ContractInputType} [contractInputType] Filter contracts by input type.
     * @param {string} [deployerAddress] Filter contracts by deployer address.
     * @param {string} [name] Filter contracts by name.
     * @param {ContractStatus} [status] Filter contracts by status.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewUpdateApi
     */
    listContracts(blockchain?: Blockchain, contractInputType?: ContractInputType, deployerAddress?: string, name?: string, status?: ContractStatus, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Contracts, any>>;
    /**
     * Update the off-chain properties, such as description, of a contract that you\'ve imported or deployed. Updated using the contracts ID as opposed to the on-chain address.
     * @summary Update a contract
     * @param {string} id The universally unique identifier of the resource.
     * @param {PatchContractRequest} patchContractRequest Update contract properties request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewUpdateApi
     */
    updateContract(id: string, patchContractRequest: PatchContractRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ContractResponse, any>>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

interface ClientConfig {
    /**
     * ApiKey that will be used to authenticate the request
     */
    apiKey: string;
    /**
     * Version of the client. Will be added to the user agent.
     */
    version: string;
    /**
     * Customized user agent. Will be added to the user agent.
     */
    userAgent?: string;
}
declare class SmartContractPlatformClient {
    DeployImport: ReturnType<typeof DeployImportApiFactory>;
    EventMonitors: ReturnType<typeof EventMonitorsApiFactory>;
    Interact: ReturnType<typeof InteractApiFactory>;
    Templates: ReturnType<typeof TemplatesApiFactory>;
    ViewUpdate: ReturnType<typeof ViewUpdateApiFactory>;
    constructor(baseUrl: string, config: ClientConfig, headers?: Record<string, string>);
}

export { type AbiParametersInner, Blockchain, type Contract, type ContractDeployment, type ContractDeploymentData, type ContractDeploymentEstimateFeeRequest, type ContractDeploymentEstimateRequest, type ContractDeploymentRequest, ContractInputType, type ContractResponse, type ContractResponseData, ContractStatus, type Contracts, type ContractsData, type CreateEventMonitorRequest, DeployImportApi, DeployImportApiAxiosParamCreator, DeployImportApiFactory, DeployImportApiFp, type Event, type EventLog, type EventLogs, type EventLogsData, type EventMonitor, type EventMonitorResponse, type EventMonitorResponseData, type EventMonitors, EventMonitorsApi, EventMonitorsApiAxiosParamCreator, EventMonitorsApiFactory, EventMonitorsApiFp, type EventMonitorsData, type FeeEstimation, type FeeEstimationData, FeeLevel, type Function, type ImportContractRequest, InteractApi, InteractApiAxiosParamCreator, InteractApiFactory, InteractApiFp, type ModelError, type ParamType, type PatchContractRequest, type ReadContractState, type ReadContractStateData, type ReadContractStateRequest, SmartContractPlatformClient, type SolFile, type TemplateContractDeployment, type TemplateContractDeploymentData, type TemplateContractDeploymentRequest, TemplatesApi, TemplatesApiAxiosParamCreator, TemplatesApiFactory, TemplatesApiFp, type TransactionFee, type UpdateEventMonitorRequest, VerificationStatus, ViewUpdateApi, ViewUpdateApiAxiosParamCreator, ViewUpdateApiFactory, ViewUpdateApiFp };
